# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `logidze` gem.
# Please instead update this file by running `bin/tapioca gem logidze`.

# Logidze provides tools for adding in-table JSON-based audit to DB tables
# and ActiveRecord extensions to work with changes history.
#
# source://logidze//lib/logidze/version.rb#3
module Logidze
  extend ::Logidze::Meta

  class << self
    # Determines if Logidze should append a version to the log after updating an old version.
    #
    # source://logidze//lib/logidze.rb#21
    def append_on_undo; end

    # Determines if Logidze should append a version to the log after updating an old version.
    #
    # source://logidze//lib/logidze.rb#21
    def append_on_undo=(_arg0); end

    # Determines whether associations versioning is enabled or not
    #
    # source://logidze//lib/logidze.rb#23
    def associations_versioning; end

    # Determines whether associations versioning is enabled or not
    #
    # source://logidze//lib/logidze.rb#23
    def associations_versioning=(_arg0); end

    # Determines if Logidze should exclude log data from SELECT statements
    #
    # source://logidze//lib/logidze.rb#25
    def ignore_log_data_by_default; end

    # Determines if Logidze should exclude log data from SELECT statements
    #
    # source://logidze//lib/logidze.rb#25
    def ignore_log_data_by_default=(_arg0); end

    # Determines what Logidze should do when upgrade is needed (:raise | :warn | :ignore)
    #
    # source://logidze//lib/logidze.rb#29
    def on_pending_upgrade; end

    # source://logidze//lib/logidze.rb#47
    def on_pending_upgrade=(mode); end

    # Whether #at should return self or nil when log_data is nil
    #
    # source://logidze//lib/logidze.rb#27
    def return_self_if_log_data_is_empty; end

    # Whether #at should return self or nil when log_data is nil
    #
    # source://logidze//lib/logidze.rb#27
    def return_self_if_log_data_is_empty=(_arg0); end

    # Instruct Logidze to create a full snapshot for the new versions, not a diff
    #
    # @example
    #   Logidze.with_full_snapshot { post.touch }
    #
    # source://logidze//lib/logidze.rb#43
    def with_full_snapshot; end

    # Temporary disable DB triggers.
    #
    # @example
    #   Logidze.without_logging { Post.update_all(active: true) }
    #
    # source://logidze//lib/logidze.rb#35
    def without_logging; end

    private

    # source://logidze//lib/logidze.rb#56
    def with_logidze_setting(name, value); end
  end
end

# source://logidze//lib/logidze/engine.rb#7
class Logidze::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# Add `has_logidze` method to AR::Base
#
# source://logidze//lib/logidze/has_logidze.rb#7
module Logidze::HasLogidze
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Logidze::HasLogidze::ClassMethods
end

# source://logidze//lib/logidze/has_logidze.rb#10
module Logidze::HasLogidze::ClassMethods
  # Include methods to work with history.
  #
  # source://logidze//lib/logidze/has_logidze.rb#13
  def has_logidze(ignore_log_data: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/has_logidze.rb#22
  def ignores_log_data?; end
end

# Log data wrapper
#
# source://logidze//lib/logidze/history.rb#7
class Logidze::History
  # @return [History] a new instance of History
  #
  # source://logidze//lib/logidze/history.rb#20
  def initialize(data); end

  # source://logidze//lib/logidze/history.rb#109
  def ==(other); end

  # source://logidze//lib/logidze/history.rb#115
  def as_json(options = T.unsafe(nil)); end

  # Return diff from the initial state to specified time or version.
  # Optional `data` parameter can be used as initial diff state.
  #
  # @raise [ArgumentError]
  #
  # source://logidze//lib/logidze/history.rb#52
  def changes_to(time: T.unsafe(nil), version: T.unsafe(nil), data: T.unsafe(nil), from: T.unsafe(nil)); end

  # Return true iff time corresponds to current version
  #
  # @return [Boolean]
  #
  # source://logidze//lib/logidze/history.rb#90
  def current_ts?(time); end

  # source://logidze//lib/logidze/history.rb#38
  def current_version; end

  # Returns the value of attribute data.
  #
  # source://logidze//lib/logidze/history.rb#15
  def data; end

  # Return diff object representing changes since specified time or version.
  #
  #
  # @example
  #
  #   diff_from(time: 2.days.ago)
  #   #=> { "id" => 1, "changes" => { "title" => { "old" => "Hello!", "new" => "World" } } }
  # @raise [ArgumentError]
  #
  # source://logidze//lib/logidze/history.rb#71
  def diff_from(time: T.unsafe(nil), version: T.unsafe(nil)); end

  # source://logidze//lib/logidze/history.rb#105
  def dup; end

  # Return true iff time greater or equal to the first version time
  #
  # @return [Boolean]
  #
  # source://logidze//lib/logidze/history.rb#85
  def exists_ts?(time); end

  # Return nearest (from the bottom) version to the specified time
  #
  # source://logidze//lib/logidze/history.rb#101
  def find_by_time(time); end

  # Return version by number or nil
  #
  # source://logidze//lib/logidze/history.rb#96
  def find_by_version(num); end

  # source://logidze//lib/logidze/history.rb#18
  def meta(*_arg0, **_arg1, &_arg2); end

  # source://logidze//lib/logidze/history.rb#46
  def next_version; end

  # source://logidze//lib/logidze/history.rb#42
  def previous_version; end

  # source://logidze//lib/logidze/history.rb#18
  def responsible_id(*_arg0, **_arg1, &_arg2); end

  # source://logidze//lib/logidze/history.rb#17
  def size(*_arg0, **_arg1, &_arg2); end

  # Returns current version number
  #
  # source://logidze//lib/logidze/history.rb#29
  def version; end

  # Change current version
  #
  # source://logidze//lib/logidze/history.rb#34
  def version=(val); end

  # source://logidze//lib/logidze/history.rb#24
  def versions; end

  private

  # source://logidze//lib/logidze/history.rb#121
  def build_changes(a, b); end

  # source://logidze//lib/logidze/history.rb#131
  def time_filter(item, _, time); end

  # source://logidze//lib/logidze/history.rb#127
  def version_filter(item, version, _); end
end

# History key
#
# source://logidze//lib/logidze/history.rb#11
Logidze::History::HISTORY = T.let(T.unsafe(nil), String)

# Type for converting JSONB to and from History
#
# source://logidze//lib/logidze/history/type.rb#8
class Logidze::History::Type < ::ActiveModel::Type::Value
  # source://logidze//lib/logidze/history/type.rb#14
  def cast_value(value); end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/history/type.rb#36
  def changed_in_place?(raw_old_value, new_value); end

  # source://logidze//lib/logidze/history/type.rb#27
  def serialize(value); end

  # source://logidze//lib/logidze/history/type.rb#9
  def type; end
end

# Version key
#
# source://logidze//lib/logidze/history.rb#13
Logidze::History::VERSION = T.let(T.unsafe(nil), String)

# Represents one log item
#
# source://logidze//lib/logidze/history/version.rb#6
class Logidze::History::Version
  # @return [Version] a new instance of Version
  #
  # source://logidze//lib/logidze/history/version.rb#20
  def initialize(data); end

  # source://logidze//lib/logidze/history/version.rb#28
  def changes; end

  # Returns the value of attribute data.
  #
  # source://logidze//lib/logidze/history/version.rb#18
  def data; end

  # source://logidze//lib/logidze/history/version.rb#40
  def meta; end

  # source://logidze//lib/logidze/history/version.rb#36
  def responsible_id; end

  # source://logidze//lib/logidze/history/version.rb#32
  def time; end

  # source://logidze//lib/logidze/history/version.rb#24
  def version; end
end

# Changes key
#
# source://logidze//lib/logidze/history/version.rb#10
Logidze::History::Version::CHANGES = T.let(T.unsafe(nil), String)

# Meta key
#
# source://logidze//lib/logidze/history/version.rb#16
Logidze::History::Version::META = T.let(T.unsafe(nil), String)

# Meta Responsible ID
#
# source://logidze//lib/logidze/history/version.rb#14
Logidze::History::Version::META_RESPONSIBLE = T.let(T.unsafe(nil), String)

# Responsible ID
#
# source://logidze//lib/logidze/history/version.rb#12
Logidze::History::Version::RESPONSIBLE = T.let(T.unsafe(nil), String)

# Timestamp key
#
# source://logidze//lib/logidze/history/version.rb#8
Logidze::History::Version::TS = T.let(T.unsafe(nil), String)

# source://logidze//lib/logidze/ignore_log_data.rb#4
module Logidze::IgnoreLogData
  extend ::ActiveSupport::Concern
end

# Provide methods to attach meta information
#
# source://logidze//lib/logidze/meta.rb#5
module Logidze::Meta
  # source://logidze//lib/logidze/meta.rb#6
  def with_meta(meta, transactional: T.unsafe(nil), &block); end

  # source://logidze//lib/logidze/meta.rb#11
  def with_responsible(responsible_id, transactional: T.unsafe(nil), &block); end
end

# source://logidze//lib/logidze/meta.rb#74
class Logidze::Meta::MetaWithTransaction < ::Logidze::Meta::MetaWrapper
  private

  # source://logidze//lib/logidze/meta.rb#77
  def call_block_in_meta_context; end

  # source://logidze//lib/logidze/meta.rb#85
  def pg_clear_meta_param; end

  # source://logidze//lib/logidze/meta.rb#81
  def pg_set_meta_param(value); end
end

# source://logidze//lib/logidze/meta.rb#90
class Logidze::Meta::MetaWithoutTransaction < ::Logidze::Meta::MetaWrapper
  private

  # source://logidze//lib/logidze/meta.rb#97
  def pg_clear_meta_param; end

  # source://logidze//lib/logidze/meta.rb#93
  def pg_set_meta_param(value); end
end

# source://logidze//lib/logidze/meta.rb#18
class Logidze::Meta::MetaWrapper
  # @return [MetaWrapper] a new instance of MetaWrapper
  #
  # source://logidze//lib/logidze/meta.rb#27
  def initialize(meta, &block); end

  # Returns the value of attribute block.
  #
  # source://logidze//lib/logidze/meta.rb#23
  def block; end

  # source://logidze//lib/logidze/meta.rb#39
  def call_block_in_meta_context; end

  # source://logidze//lib/logidze/meta.rb#25
  def connection(&block); end

  # source://logidze//lib/logidze/meta.rb#52
  def current_meta; end

  # source://logidze//lib/logidze/meta.rb#61
  def encode_meta(value); end

  # Returns the value of attribute meta.
  #
  # source://logidze//lib/logidze/meta.rb#23
  def meta; end

  # source://logidze//lib/logidze/meta.rb#56
  def meta_stack; end

  # @raise [ArgumentError]
  #
  # source://logidze//lib/logidze/meta.rb#32
  def perform; end

  # source://logidze//lib/logidze/meta.rb#65
  def pg_reset_meta_param(prev_meta); end

  class << self
    # source://logidze//lib/logidze/meta.rb#19
    def wrap_with(meta, &block); end
  end
end

# Extends model with methods to browse history
#
# source://logidze//lib/logidze/model.rb#7
module Logidze::Model
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Logidze::Model::ClassMethods

  # source://logidze//lib/logidze/model.rb#203
  def association(name); end

  # Return a dirty copy of record at specified time
  # If time/version is less then the first version, then return nil.
  # If time/version is greater then the last version, then return self.
  #
  # source://logidze//lib/logidze/model.rb#77
  def at(time: T.unsafe(nil), version: T.unsafe(nil)); end

  # Revert record to the version at specified time (without saving to DB)
  #
  # @raise [ArgumentError]
  #
  # source://logidze//lib/logidze/model.rb#114
  def at!(time: T.unsafe(nil), version: T.unsafe(nil)); end

  # Return a dirty copy of specified version of record
  #
  # source://logidze//lib/logidze/model.rb#130
  def at_version(version); end

  # Revert record to the specified version (without saving to DB)
  #
  # @raise [ArgumentError]
  #
  # source://logidze//lib/logidze/model.rb#141
  def at_version!(version); end

  # source://logidze//lib/logidze/model.rb#241
  def create_logidze_snapshot!(**opts); end

  # Return diff object representing changes since specified time.
  #
  # @example
  #
  #   post.diff_from(time: 2.days.ago) # or post.diff_from(version: 2)
  #   #=> { "id" => 1, "changes" => { "title" => { "old" => "Hello!", "new" => "World" } } }
  #
  # source://logidze//lib/logidze/model.rb#156
  def diff_from(version: T.unsafe(nil), time: T.unsafe(nil)); end

  # source://logidze//lib/logidze/model.rb#227
  def log_size; end

  # Returns the value of attribute logidze_requested_ts.
  #
  # source://logidze//lib/logidze/model.rb#71
  def logidze_requested_ts; end

  # Sets the attribute logidze_requested_ts
  #
  # @param value the value to set the attribute logidze_requested_ts to.
  #
  # source://logidze//lib/logidze/model.rb#71
  def logidze_requested_ts=(_arg0); end

  # source://logidze//lib/logidze/model.rb#98
  def logidze_versions(reverse: T.unsafe(nil), include_self: T.unsafe(nil)); end

  # Restore record to the _future_ version (if `undo!` was applied)
  # Return false if no future version found, otherwise return updated record.
  #
  # source://logidze//lib/logidze/model.rb#178
  def redo!; end

  # Loads log_data field from the database, stores to the attributes hash and returns it
  #
  # source://logidze//lib/logidze/model.rb#232
  def reload_log_data; end

  # Nullify log_data column for a single record
  #
  # source://logidze//lib/logidze/model.rb#237
  def reset_log_data; end

  # Restore record to the specified version.
  # Return false if version is unknown.
  #
  # @raise [ArgumentError]
  #
  # source://logidze//lib/logidze/model.rb#187
  def switch_to!(version, append: T.unsafe(nil)); end

  # Restore record to the previous version.
  # Return false if no previous version found, otherwise return updated record.
  #
  # source://logidze//lib/logidze/model.rb#169
  def undo!(append: T.unsafe(nil)); end

  protected

  # source://logidze//lib/logidze/model.rb#258
  def apply_column_diff(column, value); end

  # source://logidze//lib/logidze/model.rb#249
  def apply_diff(version, diff); end

  # source://logidze//lib/logidze/model.rb#264
  def build_dup(log_entry, requested_ts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/model.rb#277
  def deleted_column?(column); end

  # source://logidze//lib/logidze/model.rb#281
  def deserialize_changes!(diff); end

  # source://logidze//lib/logidze/model.rb#273
  def deserialize_value(column, value); end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/model.rb#288
  def logidze_past?; end

  # source://logidze//lib/logidze/model.rb#294
  def parse_time(ts); end
end

# source://logidze//lib/logidze/model.rb#18
module Logidze::Model::ClassMethods
  # Return records reverted to specified time
  #
  # source://logidze//lib/logidze/model.rb#20
  def at(time: T.unsafe(nil), version: T.unsafe(nil)); end

  # Initialize log_data with the current state if it's null
  #
  # source://logidze//lib/logidze/model.rb#46
  def create_logidze_snapshot(timestamp: T.unsafe(nil), only: T.unsafe(nil), except: T.unsafe(nil)); end

  # Return changes made to records since specified time
  #
  # source://logidze//lib/logidze/model.rb#25
  def diff_from(time: T.unsafe(nil), version: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/model.rb#35
  def has_logidze?; end

  # Nullify log_data column for a association
  #
  # source://logidze//lib/logidze/model.rb#41
  def reset_log_data; end

  # Alias for Logidze.without_logging
  #
  # source://logidze//lib/logidze/model.rb#30
  def without_logging(&block); end
end

# Use this to convert Ruby time to milliseconds
#
# source://logidze//lib/logidze/model.rb#69
Logidze::Model::TIME_FACTOR = T.let(T.unsafe(nil), Integer)

# source://logidze//lib/logidze/utils/function_definitions.rb#4
module Logidze::Utils; end

# This Rack middleware is used to verify that all functions are up to date
#
# source://logidze//lib/logidze/utils/check_pending.rb#9
class Logidze::Utils::CheckPending
  # @return [CheckPending] a new instance of CheckPending
  #
  # source://logidze//lib/logidze/utils/check_pending.rb#10
  def initialize(app); end

  # source://logidze//lib/logidze/utils/check_pending.rb#18
  def call(env); end

  # source://logidze//lib/logidze/utils/check_pending.rb#16
  def connection(&block); end

  private

  # source://logidze//lib/logidze/utils/check_pending.rb#52
  def library_function_versions; end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/utils/check_pending.rb#44
  def needs_migration?; end

  # source://logidze//lib/logidze/utils/check_pending.rb#31
  def notify_or_raise!; end

  # source://logidze//lib/logidze/utils/check_pending.rb#48
  def pg_function_versions; end
end

# source://logidze//lib/logidze/utils/function_definitions.rb#5
class Logidze::Utils::FuncDef < ::Struct; end

# source://logidze//lib/logidze/utils/function_definitions.rb#7
module Logidze::Utils::FunctionDefinitions
  class << self
    # source://logidze//lib/logidze/utils/function_definitions.rb#23
    def from_db; end

    # source://logidze//lib/logidze/utils/function_definitions.rb#9
    def from_fs; end

    private

    # source://logidze//lib/logidze/utils/function_definitions.rb#42
    def parse_signature(line); end

    # source://logidze//lib/logidze/utils/function_definitions.rb#38
    def parse_version(line); end
  end
end

# source://logidze//lib/logidze/utils/pending_migration_error.rb#7
class Logidze::Utils::PendingMigrationError < ::StandardError
  include ::ActiveSupport::ActionableError
  extend ::ActiveSupport::ActionableError::ClassMethods

  # source://activesupport/7.1.3.2/lib/active_support/actionable_error.rb#17
  def _actions; end

  # source://activesupport/7.1.3.2/lib/active_support/actionable_error.rb#17
  def _actions=(_arg0); end

  # source://activesupport/7.1.3.2/lib/active_support/actionable_error.rb#17
  def _actions?; end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/actionable_error.rb#17
    def _actions; end

    # source://activesupport/7.1.3.2/lib/active_support/actionable_error.rb#17
    def _actions=(value); end

    # source://activesupport/7.1.3.2/lib/active_support/actionable_error.rb#17
    def _actions?; end
  end
end

# source://logidze//lib/logidze/version.rb#4
Logidze::VERSION = T.let(T.unsafe(nil), String)

# source://logidze//lib/logidze/versioned_association.rb#14
module Logidze::VersionedAssociation
  # source://logidze//lib/logidze/versioned_association.rb#15
  def load_target; end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/versioned_association.rb#37
  def logidze_stale?; end

  # @return [Boolean]
  #
  # source://logidze//lib/logidze/versioned_association.rb#33
  def stale_target?; end
end

# source://logidze//lib/logidze/versioned_association.rb#49
module Logidze::VersionedAssociation::CollectionAssociation
  # @return [Boolean]
  #
  # source://logidze//lib/logidze/versioned_association.rb#55
  def empty?; end

  # source://logidze//lib/logidze/versioned_association.rb#50
  def ids_reader; end
end
