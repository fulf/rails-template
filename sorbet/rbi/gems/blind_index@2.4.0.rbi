# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `blind_index` gem.
# Please instead update this file by running `bin/tapioca gem blind_index`.

# source://blind_index//lib/blind_index/backfill.rb#1
module BlindIndex
  class << self
    # source://blind_index//lib/blind_index.rb#134
    def backfill(relation, columns: T.unsafe(nil), batch_size: T.unsafe(nil)); end

    # @raise [BlindIndex::Error]
    #
    # source://blind_index//lib/blind_index.rb#122
    def decode_key(key, name: T.unsafe(nil)); end

    # Returns the value of attribute default_options.
    #
    # source://blind_index//lib/blind_index.rb#18
    def default_options; end

    # Sets the attribute default_options
    #
    # @param value the value to set the attribute default_options to.
    #
    # source://blind_index//lib/blind_index.rb#18
    def default_options=(_arg0); end

    # source://blind_index//lib/blind_index.rb#27
    def generate_bidx(value, key:, **options); end

    # source://blind_index//lib/blind_index.rb#107
    def generate_key; end

    # @raise [BlindIndex::Error]
    #
    # source://blind_index//lib/blind_index.rb#113
    def index_key(table:, bidx_attribute:, master_key: T.unsafe(nil), encode: T.unsafe(nil)); end

    # source://blind_index//lib/blind_index.rb#23
    def master_key; end

    # Sets the attribute master_key
    #
    # @param value the value to set the attribute master_key to.
    #
    # source://blind_index//lib/blind_index.rb#19
    def master_key=(_arg0); end
  end
end

# source://blind_index//lib/blind_index/backfill.rb#2
class BlindIndex::Backfill
  # @return [Backfill] a new instance of Backfill
  #
  # source://blind_index//lib/blind_index/backfill.rb#5
  def initialize(relation, batch_size:, columns:); end

  # Returns the value of attribute blind_indexes.
  #
  # source://blind_index//lib/blind_index/backfill.rb#3
  def blind_indexes; end

  # source://blind_index//lib/blind_index/backfill.rb#13
  def perform; end

  private

  # source://blind_index//lib/blind_index/backfill.rb#83
  def backfill_records(records); end

  # source://blind_index//lib/blind_index/backfill.rb#29
  def build_relation; end

  # source://blind_index//lib/blind_index/backfill.rb#61
  def each_batch; end

  # modify in-place
  #
  # @raise [ArgumentError]
  #
  # source://blind_index//lib/blind_index/backfill.rb#22
  def filter_columns!(columns); end

  # source://blind_index//lib/blind_index/backfill.rb#103
  def with_transaction; end
end

# source://blind_index//lib/blind_index.rb#15
class BlindIndex::Error < ::StandardError; end

# source://blind_index//lib/blind_index/extensions.rb#2
module BlindIndex::Extensions; end

# source://blind_index//lib/blind_index/extensions.rb#48
module BlindIndex::Extensions::DynamicMatchers
  # @return [Boolean]
  #
  # source://blind_index//lib/blind_index/extensions.rb#53
  def blind_index?(name); end

  # @return [Boolean]
  #
  # source://blind_index//lib/blind_index/extensions.rb#49
  def valid?; end
end

# source://blind_index//lib/blind_index/extensions.rb#13
module BlindIndex::Extensions::PredicateBuilder
  # https://github.com/rails/rails/commit/56f30962b84fc53b76001301fb830c1594fd377e
  #
  # source://blind_index//lib/blind_index/extensions.rb#15
  def build(attribute, value, *args); end
end

# source://blind_index//lib/blind_index/extensions.rb#3
module BlindIndex::Extensions::TableMetadata
  # memoize for performance
  #
  # @return [Boolean]
  #
  # source://blind_index//lib/blind_index/extensions.rb#5
  def has_blind_indexes?; end
end

# source://blind_index//lib/blind_index/extensions.rb#30
module BlindIndex::Extensions::UniquenessValidator
  # change attribute name here instead of validate_each for better error message
  #
  # source://blind_index//lib/blind_index/extensions.rb#40
  def build_relation(klass, attribute, value); end

  # source://blind_index//lib/blind_index/extensions.rb#31
  def validate_each(record, attribute, value); end
end

# source://blind_index//lib/blind_index/key_generator.rb#2
class BlindIndex::KeyGenerator
  # @return [KeyGenerator] a new instance of KeyGenerator
  #
  # source://blind_index//lib/blind_index/key_generator.rb#3
  def initialize(master_key); end

  # pattern ported from CipherSweet
  # https://ciphersweet.paragonie.com/internals/key-hierarchy
  #
  # @raise [ArgumentError]
  #
  # source://blind_index//lib/blind_index/key_generator.rb#9
  def index_key(table:, bidx_attribute:); end

  private

  # source://blind_index//lib/blind_index/key_generator.rb#20
  def hash_hmac(hash, ikm, salt); end

  # source://blind_index//lib/blind_index/key_generator.rb#24
  def hkdf(ikm, salt:, info:, length:, hash:); end

  # source://blind_index//lib/blind_index/key_generator.rb#44
  def pack(pieces); end
end

# source://blind_index//lib/blind_index/model.rb#2
module BlindIndex::Model
  # source://blind_index//lib/blind_index/model.rb#3
  def blind_index(*attributes, rotate: T.unsafe(nil), migrating: T.unsafe(nil), **opts); end
end

# source://blind_index//lib/blind_index/model.rb#105
module BlindIndex::Model::InstanceMethods
  # source://blind_index//lib/blind_index/model.rb#106
  def read_attribute_for_validation(key); end
end

# source://blind_index//lib/blind_index/version.rb#2
BlindIndex::VERSION = T.let(T.unsafe(nil), String)
