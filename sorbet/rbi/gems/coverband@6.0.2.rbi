# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `coverband` gem.
# Please instead update this file by running `bin/tapioca gem coverband`.

# ensure we properly do release candidate versioning; https://github.com/danmayer/coverband/issues/288
# use format "4.2.1.rc.1" ~> 4.2.1.rc to prerelease versions like v4.2.1.rc.2 and v4.2.1.rc.3
#
# source://coverband//lib/coverband/version.rb#7
module Coverband
  class << self
    # source://coverband//lib/coverband.rb#72
    def configuration; end

    # source://coverband//lib/coverband.rb#42
    def configure(file = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://coverband//lib/coverband.rb#64
    def configured?; end

    # @return [Boolean]
    #
    # source://coverband//lib/coverband.rb#60
    def coverband_service?; end

    # source://coverband//lib/coverband.rb#94
    def eager_loading_coverage(&block); end

    # source://coverband//lib/coverband.rb#90
    def eager_loading_coverage!; end

    # source://coverband//lib/coverband.rb#68
    def report_coverage; end

    # source://coverband//lib/coverband.rb#98
    def runtime_coverage!; end

    # source://coverband//lib/coverband.rb#76
    def start; end

    # @return [Boolean]
    #
    # source://coverband//lib/coverband.rb#84
    def tasks_to_ignore?; end

    private

    # source://coverband//lib/coverband.rb#102
    def coverage_instance; end
  end
end

# source://coverband//lib/coverband.rb#40
Coverband::ALL_TYPES = T.let(T.unsafe(nil), Array)

# source://coverband//lib/coverband/adapters/base.rb#4
module Coverband::Adapters; end

# source://coverband//lib/coverband/adapters/base.rb#5
class Coverband::Adapters::Base
  # @return [Base] a new instance of Base
  #
  # source://coverband//lib/coverband/adapters/base.rb#14
  def initialize; end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#18
  def clear!; end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#22
  def clear_file!(_file = T.unsafe(nil)); end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#38
  def coverage(_local_type = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/base.rb#60
  def covered_files; end

  # source://coverband//lib/coverband/adapters/base.rb#54
  def get_coverage_report; end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#26
  def migrate!; end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#64
  def raw_store; end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#34
  def save_coverage; end

  # source://coverband//lib/coverband/adapters/base.rb#50
  def save_report(_report); end

  # @raise [ABSTRACT_KEY]
  #
  # source://coverband//lib/coverband/adapters/base.rb#30
  def size; end

  # source://coverband//lib/coverband/adapters/base.rb#42
  def size_in_mib; end

  # Returns the value of attribute type.
  #
  # source://coverband//lib/coverband/adapters/base.rb#12
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://coverband//lib/coverband/adapters/base.rb#12
  def type=(_arg0); end

  protected

  # TODO: This should only be 2 cases get our dup / not dups aligned
  #
  # source://coverband//lib/coverband/adapters/base.rb#146
  def array_add(latest, original); end

  # TODO: modify to extend report inline?
  #
  # source://coverband//lib/coverband/adapters/base.rb#100
  def expand_report(report); end

  # source://coverband//lib/coverband/adapters/base.rb#95
  def file_hash(file); end

  # source://coverband//lib/coverband/adapters/base.rb#136
  def merge_expanded_data(new_expanded, old_expanded); end

  # source://coverband//lib/coverband/adapters/base.rb#116
  def merge_reports(new_report, old_report, options = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/base.rb#89
  def merged_coverage(types, coverage_cache); end

  # source://coverband//lib/coverband/adapters/base.rb#80
  def simulated_runtime_coverage; end

  # source://coverband//lib/coverband/adapters/base.rb#70
  def split_coverage(types, coverage_cache); end
end

# source://coverband//lib/coverband/adapters/base.rb#10
Coverband::Adapters::Base::ABSTRACT_KEY = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/adapters/base.rb#6
Coverband::Adapters::Base::DATA_KEY = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/adapters/base.rb#9
Coverband::Adapters::Base::FILE_HASH = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/adapters/base.rb#7
Coverband::Adapters::Base::FIRST_UPDATED_KEY = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/adapters/base.rb#8
Coverband::Adapters::Base::LAST_UPDATED_KEY = T.let(T.unsafe(nil), String)

# FileStore store a merged coverage file to local disk
#
# Notes: Concurrency
# * threadsafe as the caller to save_report uses @semaphore.synchronize
# * file access process safe as each file written per process PID
#
# Usage:
# config.store = Coverband::Adapters::FileStore.new('log/coverage.log')
#
# View Reports:
# Using this assumes you are syncing the coverage files
# to some shared storage that is accessible outside of the production server
# download files to a system where you want to view the reports..
# When viewing coverage from the filestore adapter it merges all coverage
# files matching the path pattern, in this case `log/coverage.log.*`
#
# run: `bundle exec rake coverband:coverage_server`
# open http://localhost:9022/
#
# one could also build a report via code, the output is suitable to feed into SimpleCov
#
# ```
# coverband.configuration.store.merge_mode = true
# coverband.configuration.store.coverage
# ```
#
# source://coverband//lib/coverband/adapters/file_store.rb#32
class Coverband::Adapters::FileStore < ::Coverband::Adapters::Base
  # @return [FileStore] a new instance of FileStore
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#34
  def initialize(path, _opts = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/file_store.rb#43
  def clear!; end

  # source://coverband//lib/coverband/adapters/file_store.rb#55
  def coverage(_local_type = T.unsafe(nil)); end

  # Returns the value of attribute merge_mode.
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#33
  def merge_mode; end

  # Sets the attribute merge_mode
  #
  # @param value the value to set the attribute merge_mode to.
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#33
  def merge_mode=(_arg0); end

  # @raise [NotImplementedError]
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#51
  def migrate!; end

  # @raise [NotImplementedError]
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#77
  def raw_store; end

  # source://coverband//lib/coverband/adapters/file_store.rb#71
  def save_report(report); end

  # source://coverband//lib/coverband/adapters/file_store.rb#47
  def size; end

  private

  # Returns the value of attribute path.
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#83
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://coverband//lib/coverband/adapters/file_store.rb#83
  def path=(_arg0); end
end

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#7
class Coverband::Adapters::HashRedisStore < ::Coverband::Adapters::Base
  # @return [HashRedisStore] a new instance of HashRedisStore
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#100
  def initialize(redis, opts = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#126
  def clear!; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#138
  def clear_file!(file); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#176
  def coverage(local_type = T.unsafe(nil)); end

  # Returns the value of attribute get_coverage_cache.
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#98
  def get_coverage_cache; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#196
  def raw_store; end

  # Returns the value of attribute redis_namespace.
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#98
  def redis_namespace; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#148
  def save_report(report); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#200
  def size; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#204
  def size_in_mib; end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#119
  def supported?; end

  private

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#210
  def add_coverage_for_file(data_from_redis, hash); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#222
  def coverage_data_from_redis(data_from_redis); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#275
  def files_key(local_type = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#271
  def files_set(local_type = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#249
  def hash_incr_script; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#279
  def key(file, local_type = T.unsafe(nil), file_hash:); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#283
  def key_prefix(local_type = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#253
  def lua_script_content; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#267
  def relative_paths(files); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#230
  def script_input(key:, file:, file_hash:, data:, report_time:, updated_time:); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#259
  def values_from_redis(local_type, files); end
end

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#86
Coverband::Adapters::HashRedisStore::FILE_KEY = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#87
Coverband::Adapters::HashRedisStore::FILE_LENGTH_KEY = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#8
class Coverband::Adapters::HashRedisStore::GetCoverageNullCacheStore
  class << self
    # source://coverband//lib/coverband/adapters/hash_redis_store.rb#9
    def clear!(*_local_types); end

    # @yield [0]
    #
    # source://coverband//lib/coverband/adapters/hash_redis_store.rb#12
    def fetch(_local_type); end
  end
end

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#17
class Coverband::Adapters::HashRedisStore::GetCoverageRedisCacheStore
  # @return [GetCoverageRedisCacheStore] a new instance of GetCoverageRedisCacheStore
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#20
  def initialize(redis, key_prefix); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#49
  def clear!(local_types = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#25
  def fetch(local_type); end

  private

  # sleep in between to avoid holding other redis commands..
  # with a small random offset so runtime and eager types can be processed "at the same time"
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#60
  def deferred_time; end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#64
  def del(local_type); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#68
  def get(local_type); end

  # lock for at most 60 minutes
  #
  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#77
  def lock!(local_type); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#72
  def set(local_type, value); end

  # source://coverband//lib/coverband/adapters/hash_redis_store.rb#81
  def unlock!(local_type); end
end

# 30 minutes
#
# source://coverband//lib/coverband/adapters/hash_redis_store.rb#18
Coverband::Adapters::HashRedisStore::GetCoverageRedisCacheStore::LOCK_LIMIT = T.let(T.unsafe(nil), Integer)

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#96
Coverband::Adapters::HashRedisStore::JSON_PAYLOAD_EXPIRATION = T.let(T.unsafe(nil), Integer)

# source://coverband//lib/coverband/adapters/hash_redis_store.rb#88
Coverband::Adapters::HashRedisStore::META_DATA_KEYS = T.let(T.unsafe(nil), Array)

# This key isn't related to the coverband version, but to the internal format
# used to store data to redis. It is changed only when breaking changes to our
# redis format are required.
#
# source://coverband//lib/coverband/adapters/hash_redis_store.rb#94
Coverband::Adapters::HashRedisStore::REDIS_STORAGE_FORMAT_VERSION = T.let(T.unsafe(nil), String)

# NullStore is for benchmarking the impacts of calculating
# and storing coverage data independent of Coverband/Coverage
#
# Usage:
# config.store = Coverband::Adapters::NullStore.new
#
# source://coverband//lib/coverband/adapters/null_store.rb#12
class Coverband::Adapters::NullStore < ::Coverband::Adapters::Base
  # @return [NullStore] a new instance of NullStore
  #
  # source://coverband//lib/coverband/adapters/null_store.rb#13
  def initialize(_opts = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/null_store.rb#17
  def clear!; end

  # source://coverband//lib/coverband/adapters/null_store.rb#29
  def coverage(_local_type = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://coverband//lib/coverband/adapters/null_store.rb#25
  def migrate!; end

  # @raise [NotImplementedError]
  #
  # source://coverband//lib/coverband/adapters/null_store.rb#37
  def raw_store; end

  # source://coverband//lib/coverband/adapters/null_store.rb#33
  def save_report(report); end

  # source://coverband//lib/coverband/adapters/null_store.rb#21
  def size; end
end

# source://coverband//lib/coverband/adapters/redis_store.rb#8
class Coverband::Adapters::RedisStore < ::Coverband::Adapters::Base
  # @return [RedisStore] a new instance of RedisStore
  #
  # source://coverband//lib/coverband/adapters/redis_store.rb#18
  def initialize(redis, opts = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/redis_store.rb#30
  def clear!; end

  # source://coverband//lib/coverband/adapters/redis_store.rb#36
  def clear_file!(filename); end

  # source://coverband//lib/coverband/adapters/redis_store.rb#75
  def coverage(local_type = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Current implementation moves from coverband3_1 to coverband_3_2
  # In the future this can be made more general and support a more specific
  # version format.
  #
  # source://coverband//lib/coverband/adapters/redis_store.rb#53
  def migrate!; end

  # source://coverband//lib/coverband/adapters/redis_store.rb#93
  def raw_store; end

  # Returns the value of attribute redis_namespace.
  #
  # source://coverband//lib/coverband/adapters/redis_store.rb#16
  def redis_namespace; end

  # Note: This could lead to slight race on redis
  # where multiple processes pull the old coverage and add to it then push
  # the Coverband 2 had the same issue,
  # and the tradeoff has always been acceptable
  #
  # source://coverband//lib/coverband/adapters/redis_store.rb#87
  def save_report(report); end

  # source://coverband//lib/coverband/adapters/redis_store.rb#44
  def size; end

  # source://coverband//lib/coverband/adapters/redis_store.rb#70
  def type=(type); end

  private

  # source://coverband//lib/coverband/adapters/redis_store.rb#105
  def base_key; end

  # Returns the value of attribute redis.
  #
  # source://coverband//lib/coverband/adapters/redis_store.rb#99
  def redis; end

  # source://coverband//lib/coverband/adapters/redis_store.rb#101
  def reset_base_key; end

  # source://coverband//lib/coverband/adapters/redis_store.rb#113
  def save_coverage(data, local_type = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/redis_store.rb#109
  def type_base_key(local_type); end
end

# This key isn't related to the coverband version, but to the internal format
# used to store data to redis. It is changed only when breaking changes to our
# redis format are required.
#
# source://coverband//lib/coverband/adapters/redis_store.rb#14
Coverband::Adapters::RedisStore::REDIS_STORAGE_FORMAT_VERSION = T.let(T.unsafe(nil), String)

# StdoutStore is for testing and development
#
# Usage:
# config.store = Coverband::Adapters::StdoutStore.new
#
# source://coverband//lib/coverband/adapters/stdout_store.rb#11
class Coverband::Adapters::StdoutStore < ::Coverband::Adapters::Base
  # @return [StdoutStore] a new instance of StdoutStore
  #
  # source://coverband//lib/coverband/adapters/stdout_store.rb#12
  def initialize(_opts = T.unsafe(nil)); end

  # source://coverband//lib/coverband/adapters/stdout_store.rb#16
  def clear!; end

  # source://coverband//lib/coverband/adapters/stdout_store.rb#28
  def coverage(_local_type = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://coverband//lib/coverband/adapters/stdout_store.rb#24
  def migrate!; end

  # @raise [NotImplementedError]
  #
  # source://coverband//lib/coverband/adapters/stdout_store.rb#36
  def raw_store; end

  # source://coverband//lib/coverband/adapters/stdout_store.rb#32
  def save_report(report); end

  # source://coverband//lib/coverband/adapters/stdout_store.rb#20
  def size; end
end

# source://coverband//lib/coverband/at_exit.rb#4
class Coverband::AtExit
  class << self
    # source://coverband//lib/coverband/at_exit.rb#8
    def register; end
  end
end

# source://coverband//lib/coverband/integrations/background.rb#4
class Coverband::Background
  class << self
    # @return [Boolean]
    #
    # source://coverband//lib/coverband/integrations/background.rb#19
    def running?; end

    # source://coverband//lib/coverband/integrations/background.rb#23
    def start; end

    # source://coverband//lib/coverband/integrations/background.rb#8
    def stop; end
  end
end

# source://coverband//lib/coverband/integrations/background_middleware.rb#4
class Coverband::BackgroundMiddleware
  # @return [BackgroundMiddleware] a new instance of BackgroundMiddleware
  #
  # source://coverband//lib/coverband/integrations/background_middleware.rb#5
  def initialize(app); end

  # source://coverband//lib/coverband/integrations/background_middleware.rb#9
  def call(env); end
end

# source://coverband//lib/coverband.rb#35
Coverband::CONFIG_FILE = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/collectors/delta.rb#4
module Coverband::Collectors; end

# This abstract class makes it easy to track any used/unused with timestamp set of usage
#
# source://coverband//lib/coverband/collectors/abstract_tracker.rb#11
class Coverband::Collectors::AbstractTracker
  # @raise [NotImplementedError]
  # @return [AbstractTracker] a new instance of AbstractTracker
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#18
  def initialize(options = T.unsafe(nil)); end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#59
  def all_keys; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#68
  def as_json; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#89
  def clear_key!(key); end

  # Returns the value of attribute ignore_patterns.
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#16
  def ignore_patterns; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#39
  def keys_to_record; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#35
  def logged_keys; end

  # Returns the value of attribute logger.
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#16
  def logger; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#84
  def reset_recordings; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#115
  def route; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#96
  def save_report; end

  # Returns the value of attribute store.
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#16
  def store; end

  # Returns the value of attribute target.
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#15
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#15
  def target=(_arg0); end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#119
  def title; end

  # This method is called on every translation usage
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#46
  def track_key(key); end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#76
  def tracking_since; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#63
  def unused_keys(used_keys = T.unsafe(nil)); end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#55
  def used_keys; end

  protected

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#125
  def newly_seen_key?(key); end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#129
  def track_key?(key, options = T.unsafe(nil)); end

  private

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#159
  def class_key; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#135
  def concrete_target; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#139
  def redis_store; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#151
  def tracker_key; end

  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#155
  def tracker_time_key; end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/collectors/abstract_tracker.rb#143
  def tracker_time_key_exists?; end

  class << self
    # This is the basic rails version supported, if there is something more unique over ride in subclass
    #
    # @return [Boolean]
    #
    # source://coverband//lib/coverband/collectors/abstract_tracker.rb#111
    def supported_version?; end
  end
end

# source://coverband//lib/coverband/collectors/abstract_tracker.rb#12
Coverband::Collectors::AbstractTracker::REPORT_ROUTE = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/collectors/abstract_tracker.rb#13
Coverband::Collectors::AbstractTracker::TITLE = T.let(T.unsafe(nil), String)

# StandardError seems like be better option
# coverband previously had RuntimeError here
# but runtime error can let a large number of error crash this method
# and this method is currently in a ensure block in middleware and threads
#
# source://coverband//lib/coverband/collectors/coverage.rb#14
class Coverband::Collectors::Coverage
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @raise [NotImplementedError]
  # @return [Coverage] a new instance of Coverage
  #
  # source://coverband//lib/coverband/collectors/coverage.rb#88
  def initialize; end

  # source://coverband//lib/coverband/collectors/coverage.rb#40
  def eager_loading; end

  # source://coverband//lib/coverband/collectors/coverage.rb#36
  def eager_loading!; end

  # source://coverband//lib/coverband/collectors/coverage.rb#57
  def report_coverage; end

  # source://coverband//lib/coverband/collectors/coverage.rb#21
  def reset_instance; end

  # source://coverband//lib/coverband/collectors/coverage.rb#32
  def runtime!; end

  # source://coverband//lib/coverband/collectors/coverage.rb#49
  def toggle_eager_loading; end

  private

  # source://coverband//lib/coverband/collectors/coverage.rb#83
  def filtered_files(new_results); end

  class << self
    # @return [Boolean]
    #
    # source://coverband//lib/coverband/collectors/coverage.rb#17
    def ruby_version_greater_than_or_equal_to?(version); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://coverband//lib/coverband/collectors/delta.rb#5
class Coverband::Collectors::Delta
  # @return [Delta] a new instance of Delta
  #
  # source://coverband//lib/coverband/collectors/delta.rb#11
  def initialize(current_coverage); end

  # Returns the value of attribute current_coverage.
  #
  # source://coverband//lib/coverband/collectors/delta.rb#9
  def current_coverage; end

  # source://coverband//lib/coverband/collectors/delta.rb#30
  def results; end

  private

  # source://coverband//lib/coverband/collectors/delta.rb#72
  def array_diff(latest, original); end

  # source://coverband//lib/coverband/collectors/delta.rb#48
  def generate; end

  # source://coverband//lib/coverband/collectors/delta.rb#78
  def transform_oneshot_lines_results(results); end

  class << self
    # source://coverband//lib/coverband/collectors/delta.rb#40
    def reset; end

    # source://coverband//lib/coverband/collectors/delta.rb#25
    def results(process_coverage = T.unsafe(nil)); end
  end
end

# source://coverband//lib/coverband/collectors/delta.rb#15
class Coverband::Collectors::Delta::RubyCoverage
  class << self
    # source://coverband//lib/coverband/collectors/delta.rb#16
    def results; end
  end
end

# source://coverband//lib/coverband/collectors/translation_tracker.rb#8
module Coverband::Collectors::I18n; end

# source://coverband//lib/coverband/collectors/translation_tracker.rb#9
module Coverband::Collectors::I18n::KeyRegistry
  # source://coverband//lib/coverband/collectors/translation_tracker.rb#10
  def lookup(locale, key, scope = T.unsafe(nil), options = T.unsafe(nil)); end
end

# This class tracks route usage via ActiveSupport::Notifications
#
# source://coverband//lib/coverband/collectors/route_tracker.rb#11
class Coverband::Collectors::RouteTracker < ::Coverband::Collectors::AbstractTracker
  # @return [RouteTracker] a new instance of RouteTracker
  #
  # source://coverband//lib/coverband/collectors/route_tracker.rb#15
  def initialize(options = T.unsafe(nil)); end

  # source://coverband//lib/coverband/collectors/route_tracker.rb#61
  def railtie!; end

  # This method is called on every routing call, so we try to reduce method calls
  # and ensure high performance
  #
  # source://coverband//lib/coverband/collectors/route_tracker.rb#27
  def track_key(payload); end

  # source://coverband//lib/coverband/collectors/route_tracker.rb#55
  def unused_keys(used_keys = T.unsafe(nil)); end

  private

  # source://coverband//lib/coverband/collectors/route_tracker.rb#77
  def concrete_target; end

  class << self
    # @return [Boolean]
    #
    # source://coverband//lib/coverband/collectors/route_tracker.rb#51
    def supported_version?; end
  end
end

# source://coverband//lib/coverband/collectors/route_tracker.rb#12
Coverband::Collectors::RouteTracker::REPORT_ROUTE = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/collectors/route_tracker.rb#13
Coverband::Collectors::RouteTracker::TITLE = T.let(T.unsafe(nil), String)

# This class tracks translation usage via I18n::Backend
#
# source://coverband//lib/coverband/collectors/translation_tracker.rb#23
class Coverband::Collectors::TranslationTracker < ::Coverband::Collectors::AbstractTracker
  # source://coverband//lib/coverband/collectors/translation_tracker.rb#27
  def railtie!; end

  private

  # source://coverband//lib/coverband/collectors/translation_tracker.rb#34
  def concrete_target; end

  # source://coverband//lib/coverband/collectors/translation_tracker.rb#47
  def flatten_hash(hash); end
end

# source://coverband//lib/coverband/collectors/translation_tracker.rb#24
Coverband::Collectors::TranslationTracker::REPORT_ROUTE = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/collectors/translation_tracker.rb#25
Coverband::Collectors::TranslationTracker::TITLE = T.let(T.unsafe(nil), String)

# This class tracks view file usage via ActiveSupport::Notifications
#
# This is a port of Flatfoot, a project I open sourced years ago,
# but am now rolling into Coverband
# https://github.com/livingsocial/flatfoot
#
# source://coverband//lib/coverband/collectors/view_tracker.rb#15
class Coverband::Collectors::ViewTracker < ::Coverband::Collectors::AbstractTracker
  # @return [ViewTracker] a new instance of ViewTracker
  #
  # source://coverband//lib/coverband/collectors/view_tracker.rb#21
  def initialize(options = T.unsafe(nil)); end

  # source://coverband//lib/coverband/collectors/view_tracker.rb#72
  def all_keys; end

  # source://coverband//lib/coverband/collectors/view_tracker.rb#90
  def clear_key!(filename); end

  # source://coverband//lib/coverband/collectors/view_tracker.rb#29
  def railtie!; end

  # Returns the value of attribute roots.
  #
  # source://coverband//lib/coverband/collectors/view_tracker.rb#16
  def roots; end

  # This method is called on every render call, so we try to reduce method calls
  # and ensure high performance
  #
  # source://coverband//lib/coverband/collectors/view_tracker.rb#39
  def track_key(payload); end

  # source://coverband//lib/coverband/collectors/view_tracker.rb#83
  def unused_keys(used_views = T.unsafe(nil)); end

  # source://coverband//lib/coverband/collectors/view_tracker.rb#60
  def used_keys; end

  private

  # source://coverband//lib/coverband/collectors/view_tracker.rb#105
  def concrete_target; end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/collectors/view_tracker.rb#100
  def track_file?(file, options = T.unsafe(nil)); end
end

# source://coverband//lib/coverband/collectors/view_tracker.rb#18
Coverband::Collectors::ViewTracker::REPORT_ROUTE = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband/collectors/view_tracker.rb#19
Coverband::Collectors::ViewTracker::TITLE = T.let(T.unsafe(nil), String)

# This class extends view tracker to support web service reporting
#
# source://coverband//lib/coverband/collectors/view_tracker_service.rb#8
class Coverband::Collectors::ViewTrackerService < ::Coverband::Collectors::ViewTracker
  # source://coverband//lib/coverband/collectors/view_tracker_service.rb#9
  def save_report; end

  private

  # source://coverband//lib/coverband/collectors/view_tracker_service.rb#32
  def logger; end

  # source://coverband//lib/coverband/collectors/view_tracker_service.rb#36
  def save_tracked_views(views:, reported_time:); end

  class << self
    # @return [Boolean]
    #
    # source://coverband//lib/coverband/collectors/view_tracker_service.rb#26
    def supported_version?; end
  end
end

# source://coverband//lib/coverband/configuration.rb#4
class Coverband::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://coverband//lib/coverband/configuration.rb#55
  def initialize; end

  # source://coverband//lib/coverband/configuration.rb#222
  def all_root_paths; end

  # source://coverband//lib/coverband/configuration.rb#230
  def all_root_patterns; end

  # source://coverband//lib/coverband/configuration.rb#256
  def api_key; end

  # Sets the attribute api_key
  #
  # @param value the value to set the attribute api_key to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def api_key=(_arg0); end

  # Returns the value of attribute background_reporting_enabled.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def background_reporting_enabled; end

  # Sets the attribute background_reporting_enabled
  #
  # @param value the value to set the attribute background_reporting_enabled to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def background_reporting_enabled=(_arg0); end

  # The adjustments here either protect the redis or service from being overloaded
  # the tradeoff being the delay in when reporting data is available
  # if running your own redis increasing this number reduces load on the redis CPU
  #
  # source://coverband//lib/coverband/configuration.rb#154
  def background_reporting_sleep_seconds; end

  # Sets the attribute background_reporting_sleep_seconds
  #
  # @param value the value to set the attribute background_reporting_sleep_seconds to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def background_reporting_sleep_seconds=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#264
  def coverband_env; end

  # source://coverband//lib/coverband/configuration.rb#268
  def coverband_timeout; end

  # Sets the attribute coverband_timeout
  #
  # @param value the value to set the attribute coverband_timeout to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def coverband_timeout=(_arg0); end

  # Returns the value of attribute csp_policy.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def csp_policy; end

  # Sets the attribute csp_policy
  #
  # @param value the value to set the attribute csp_policy to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def csp_policy=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#218
  def current_root; end

  # Returns the value of attribute defer_eager_loading_data.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def defer_eager_loading_data; end

  # Sets the attribute defer_eager_loading_data
  #
  # @param value the value to set the attribute defer_eager_loading_data to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def defer_eager_loading_data=(_arg0); end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/configuration.rb#288
  def defer_eager_loading_data?; end

  # Returns the value of attribute gem_details.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def gem_details; end

  # Sets the attribute gem_details
  #
  # @param value the value to set the attribute gem_details to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def gem_details=(_arg0); end

  # Returns the value of attribute ignore.
  #
  # source://coverband//lib/coverband/configuration.rb#22
  def ignore; end

  # Don't allow the ignore to override things like gem tracking
  #
  # source://coverband//lib/coverband/configuration.rb#211
  def ignore=(ignored_array); end

  # source://coverband//lib/coverband/configuration.rb#139
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def logger=(_arg0); end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/configuration.rb#248
  def one_shot_coverage_implemented_in_ruby_version?; end

  # source://coverband//lib/coverband/configuration.rb#147
  def password; end

  # Sets the attribute password
  #
  # @param value the value to set the attribute password to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def password=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#280
  def process_type; end

  # Sets the attribute process_type
  #
  # @param value the value to set the attribute process_type to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def process_type=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#114
  def railtie!; end

  # Returns the value of attribute redis_namespace.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def redis_namespace; end

  # Sets the attribute redis_namespace
  #
  # @param value the value to set the attribute redis_namespace to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def redis_namespace=(_arg0); end

  # Returns the value of attribute redis_ttl.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def redis_ttl; end

  # Sets the attribute redis_ttl
  #
  # @param value the value to set the attribute redis_ttl to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def redis_ttl=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#252
  def redis_url; end

  # Sets the attribute redis_url
  #
  # @param value the value to set the attribute redis_url to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def redis_url=(_arg0); end

  # Returns the value of attribute report_on_exit.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def report_on_exit; end

  # Sets the attribute report_on_exit
  #
  # @param value the value to set the attribute report_on_exit to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def report_on_exit=(_arg0); end

  # Returns the value of attribute reporter.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def reporter; end

  # Sets the attribute reporter
  #
  # @param value the value to set the attribute reporter to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def reporter=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#166
  def reporting_wiggle; end

  # Sets the attribute reporting_wiggle
  #
  # @param value the value to set the attribute reporting_wiggle to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def reporting_wiggle=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#59
  def reset; end

  # Returns the value of attribute root.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def root; end

  # Sets the attribute root
  #
  # @param value the value to set the attribute root to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def root=(_arg0); end

  # Returns the value of attribute root_paths.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def root_paths; end

  # Sets the attribute root_paths
  #
  # @param value the value to set the attribute root_paths to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def root_paths=(_arg0); end

  # Returns the value of attribute route_tracker.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def route_tracker; end

  # Sets the attribute route_tracker
  #
  # @param value the value to set the attribute route_tracker to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def route_tracker=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#311
  def s3_access_key_id; end

  # Sets the attribute s3_access_key_id
  #
  # @param value the value to set the attribute s3_access_key_id to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def s3_access_key_id=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#303
  def s3_bucket; end

  # Sets the attribute s3_bucket
  #
  # @param value the value to set the attribute s3_bucket to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def s3_bucket=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#307
  def s3_region; end

  # Sets the attribute s3_region
  #
  # @param value the value to set the attribute s3_region to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def s3_region=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#315
  def s3_secret_access_key; end

  # Sets the attribute s3_secret_access_key
  #
  # @param value the value to set the attribute s3_secret_access_key to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def s3_secret_access_key=(_arg0); end

  # Don't allow the to override defaults
  #
  # source://coverband//lib/coverband/configuration.rb#204
  def search_paths=(path_array); end

  # Sets the attribute send_deferred_eager_loading_data
  #
  # @param value the value to set the attribute send_deferred_eager_loading_data to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def send_deferred_eager_loading_data=(_arg0); end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/configuration.rb#292
  def send_deferred_eager_loading_data?; end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/configuration.rb#284
  def service?; end

  # source://coverband//lib/coverband/configuration.rb#272
  def service_dev_mode; end

  # Sets the attribute service_dev_mode
  #
  # @param value the value to set the attribute service_dev_mode to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def service_dev_mode=(_arg0); end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/configuration.rb#296
  def service_disabled_dev_test_env?; end

  # source://coverband//lib/coverband/configuration.rb#276
  def service_test_mode; end

  # Sets the attribute service_test_mode
  #
  # @param value the value to set the attribute service_test_mode to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def service_test_mode=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#260
  def service_url; end

  # Sets the attribute service_url
  #
  # @param value the value to set the attribute service_url to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def service_url=(_arg0); end

  # Returns the value of attribute simulate_oneshot_lines_coverage.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def simulate_oneshot_lines_coverage; end

  # Sets the attribute simulate_oneshot_lines_coverage
  #
  # @param value the value to set the attribute simulate_oneshot_lines_coverage to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def simulate_oneshot_lines_coverage=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#170
  def store; end

  # source://coverband//lib/coverband/configuration.rb#180
  def store=(store); end

  # Returns the value of attribute test_env.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def test_env; end

  # Sets the attribute test_env
  #
  # @param value the value to set the attribute test_env to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def test_env=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#235
  def to_h; end

  # Returns the value of attribute track_gems.
  #
  # source://coverband//lib/coverband/configuration.rb#22
  def track_gems; end

  # source://coverband//lib/coverband/configuration.rb#319
  def track_gems=(_value); end

  # Returns the value of attribute track_routes.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def track_routes; end

  # Sets the attribute track_routes
  #
  # @param value the value to set the attribute track_routes to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def track_routes=(_arg0); end

  # Returns the value of attribute track_translations.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def track_translations; end

  # Sets the attribute track_translations
  #
  # @param value the value to set the attribute track_translations to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def track_translations=(_arg0); end

  # source://coverband//lib/coverband/configuration.rb#188
  def track_views; end

  # Sets the attribute track_views
  #
  # @param value the value to set the attribute track_views to.
  #
  # source://coverband//lib/coverband/configuration.rb#16
  def track_views=(_arg0); end

  # Search Paths
  #
  # source://coverband//lib/coverband/configuration.rb#197
  def tracked_search_paths; end

  # Returns the value of attribute trackers.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def trackers; end

  # Sets the attribute trackers
  #
  # @param value the value to set the attribute trackers to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def trackers=(_arg0); end

  # Returns the value of attribute translations_tracker.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def translations_tracker; end

  # Sets the attribute translations_tracker
  #
  # @param value the value to set the attribute translations_tracker to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def translations_tracker=(_arg0); end

  # Returns the value of attribute use_oneshot_lines_coverage.
  #
  # source://coverband//lib/coverband/configuration.rb#22
  def use_oneshot_lines_coverage; end

  # @raise [StandardError]
  #
  # source://coverband//lib/coverband/configuration.rb#242
  def use_oneshot_lines_coverage=(value); end

  # Returns the value of attribute verbose.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def verbose; end

  # Sets the attribute verbose
  #
  # @param value the value to set the attribute verbose to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def verbose=(_arg0); end

  # Returns the value of attribute view_tracker.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def view_tracker; end

  # Sets the attribute view_tracker
  #
  # @param value the value to set the attribute view_tracker to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def view_tracker=(_arg0); end

  # Returns the value of attribute web_debug.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def web_debug; end

  # Sets the attribute web_debug
  #
  # @param value the value to set the attribute web_debug to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def web_debug=(_arg0); end

  # Returns the value of attribute web_enable_clear.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def web_enable_clear; end

  # Sets the attribute web_enable_clear
  #
  # @param value the value to set the attribute web_enable_clear to.
  #
  # source://coverband//lib/coverband/configuration.rb#5
  def web_enable_clear=(_arg0); end

  private

  # source://coverband//lib/coverband/configuration.rb#325
  def redis_store_options; end
end

# Heroku when building assets runs code from a dynamic directory
# /tmp was added to avoid coverage from /tmp/build directories during
# heroku asset compilation
#
# source://coverband//lib/coverband/configuration.rb#49
Coverband::Configuration::IGNORE_DEFAULTS = T.let(T.unsafe(nil), Array)

# TODO: This is is brittle and not a great solution to avoid deploy time
# actions polluting the 'runtime' metrics
#
# * Perhaps detect heroku deployment ENV var opposed to tasks?
#
# source://coverband//lib/coverband/configuration.rb#30
Coverband::Configuration::IGNORE_TASKS = T.let(T.unsafe(nil), Array)

# source://coverband//lib/coverband/configuration.rb#234
Coverband::Configuration::SKIPPED_SETTINGS = T.let(T.unsafe(nil), Array)

# Add in missing files which were never loaded
# we need to know what all paths to check for unloaded files
#
# source://coverband//lib/coverband/configuration.rb#53
Coverband::Configuration::TRACKED_DEFAULT_PATHS = T.let(T.unsafe(nil), Array)

# source://coverband//lib/coverband.rb#37
Coverband::EAGER_TYPE = T.let(T.unsafe(nil), Symbol)

# source://coverband//lib/coverband.rb#38
Coverband::MERGED_TYPE = T.let(T.unsafe(nil), Symbol)

# source://coverband//lib/coverband.rb#36
Coverband::RUNTIME_TYPE = T.let(T.unsafe(nil), Symbol)

# source://coverband//lib/coverband/integrations/rack_server_check.rb#4
class Coverband::RackServerCheck
  # @return [RackServerCheck] a new instance of RackServerCheck
  #
  # source://coverband//lib/coverband/integrations/rack_server_check.rb#9
  def initialize(stack); end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/integrations/rack_server_check.rb#17
  def rack_server?; end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/integrations/rack_server_check.rb#21
  def rails_server?; end

  # @return [Boolean]
  #
  # source://coverband//lib/coverband/integrations/rack_server_check.rb#13
  def running?; end

  class << self
    # @return [Boolean]
    #
    # source://coverband//lib/coverband/integrations/rack_server_check.rb#5
    def running?; end
  end
end

# source://coverband//lib/coverband/utils/railtie.rb#4
module Coverband::RailsEagerLoad
  # source://coverband//lib/coverband/utils/railtie.rb#5
  def eager_load!; end
end

# source://coverband//lib/coverband/utils/railtie.rb#12
class Coverband::Railtie < ::Rails::Railtie; end

# source://coverband//lib/coverband/reporters/base.rb#4
module Coverband::Reporters; end

# This is the base clase for report generation
# it helps with filtering, normalization, etc for final reprort generation
#
# source://coverband//lib/coverband/reporters/base.rb#9
class Coverband::Reporters::Base
  class << self
    # Add back files that exist in the project but have no Coverage
    # This makes it easy to find and delete files with no references
    #
    # source://coverband//lib/coverband/reporters/base.rb#30
    def fix_reports(reports); end

    # source://coverband//lib/coverband/reporters/base.rb#13
    def report(store, _options = T.unsafe(nil)); end

    protected

    # source://coverband//lib/coverband/reporters/base.rb#51
    def fix_file_names(report_hash, roots); end

    # why do we need to merge covered files data?
    # basically because paths on machines or deployed hosts could be different, so
    # two different keys could point to the same filename or `line_key`
    # TODO: think we are filtering based on ignore while sending to the store
    # and as we also pull it out here
    #
    # source://coverband//lib/coverband/reporters/base.rb#92
    def get_current_scov_data_imp(store, roots); end

    # > merge_arrays([nil,0,0,1,0,1],[nil,nil,0,1,0,0])
    # > [nil,0,0,1,0,1]
    #
    # source://coverband//lib/coverband/reporters/base.rb#72
    def merge_arrays(first, second); end
  end
end

# Console Report allows for simple reporting via the command line.
#
# source://coverband//lib/coverband/reporters/console_report.rb#8
class Coverband::Reporters::ConsoleReport < ::Coverband::Reporters::Base
  class << self
    # source://coverband//lib/coverband/reporters/console_report.rb#9
    def report(store, options = T.unsafe(nil)); end
  end
end

# source://coverband//lib/coverband.rb#126
class Coverband::Reporters::Web
  # NOTE: if the user doesn't setup the webreporter
  # we don't need any of the below files loaded or using memory
  #
  # @return [Web] a new instance of Web
  #
  # source://coverband//lib/coverband.rb#131
  def initialize; end

  class << self
    # source://coverband//lib/coverband.rb#144
    def call(env); end
  end
end

# source://coverband//lib/coverband.rb#34
Coverband::SERVICE_CONFIG = T.let(T.unsafe(nil), String)

# source://coverband//lib/coverband.rb#39
Coverband::TYPES = T.let(T.unsafe(nil), Array)

# source://coverband//lib/coverband/utils/relative_file_converter.rb#4
module Coverband::Utils; end

# source://coverband//lib/coverband/utils/absolute_file_converter.rb#5
class Coverband::Utils::AbsoluteFileConverter
  # @return [AbsoluteFileConverter] a new instance of AbsoluteFileConverter
  #
  # source://coverband//lib/coverband/utils/absolute_file_converter.rb#6
  def initialize(roots); end

  # source://coverband//lib/coverband/utils/absolute_file_converter.rb#23
  def convert(relative_path); end

  class << self
    # source://coverband//lib/coverband/utils/absolute_file_converter.rb#19
    def convert(relative_path); end

    # source://coverband//lib/coverband/utils/absolute_file_converter.rb#11
    def instance; end

    # source://coverband//lib/coverband/utils/absolute_file_converter.rb#15
    def reset; end
  end
end

# source://coverband//lib/coverband/utils/file_hasher.rb#5
class Coverband::Utils::FileHasher
  class << self
    # source://coverband//lib/coverband/utils/file_hasher.rb#8
    def hash_file(file, path_converter: T.unsafe(nil)); end
  end
end

# source://coverband//lib/coverband/utils/relative_file_converter.rb#5
class Coverband::Utils::RelativeFileConverter
  # @return [RelativeFileConverter] a new instance of RelativeFileConverter
  #
  # source://coverband//lib/coverband/utils/relative_file_converter.rb#18
  def initialize(roots); end

  # source://coverband//lib/coverband/utils/relative_file_converter.rb#23
  def convert(file); end

  private

  # source://coverband//lib/coverband/utils/relative_file_converter.rb#36
  def normalize(paths); end

  class << self
    # source://coverband//lib/coverband/utils/relative_file_converter.rb#14
    def convert(file); end

    # source://coverband//lib/coverband/utils/relative_file_converter.rb#6
    def instance; end

    # source://coverband//lib/coverband/utils/relative_file_converter.rb#10
    def reset; end
  end
end

# source://coverband//lib/coverband/version.rb#8
Coverband::VERSION = T.let(T.unsafe(nil), String)

class Rails::Engine < ::Rails::Railtie
  include ::Coverband::RailsEagerLoad
end
