# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `field_test` gem.
# Please instead update this file by running `bin/tapioca gem field_test`.

module ActionController::Base::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper

  # source://ahoy_matey/5.0.2/lib/ahoy/controller.rb#6
  def ahoy(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#39
  def alert(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching/fragments.rb#33
  def combined_fragment_cache_key(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/content_security_policy.rb#11
  def content_security_policy?(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/content_security_policy.rb#12
  def content_security_policy_nonce(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/cookies.rb#8
  def cookies(*args, **_arg1, &block); end

  # source://ahoy_matey/5.0.2/lib/ahoy/controller.rb#5
  def current_visit(*args, **_arg1, &block); end

  # source://devise/4.9.3/lib/devise/controllers/helpers.rb#13
  def devise_controller?(*args, **_arg1, &block); end

  # source://field_test//lib/field_test/controller.rb#8
  def field_test(*args, **_arg1, &block); end

  # source://field_test//lib/field_test/controller.rb#9
  def field_test_converted(*args, **_arg1, &block); end

  # source://field_test//lib/field_test/controller.rb#10
  def field_test_experiments(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/request_forgery_protection.rb#101
  def form_authenticity_token(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/flash.rb#39
  def notice(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/action_controller/metal/request_forgery_protection.rb#102
  def protect_against_forgery?(*args, **_arg1, &block); end

  # source://devise/4.9.3/lib/devise/controllers/helpers.rb#13
  def signed_in?(*args, **_arg1, &block); end

  def turbo_frame_request_id(*args, **_arg1, &block); end
  def turbo_native_app?(*args, **_arg1, &block); end

  # source://actionpack/7.1.3.2/lib/abstract_controller/caching.rb#43
  def view_cache_dependencies(*args, **_arg1, &block); end

  # source://devise/4.9.3/lib/devise/controllers/helpers.rb#13
  def warden(*args, **_arg1, &block); end
end

# source://field_test//lib/field_test/experiment.rb#1
module FieldTest
  class << self
    # source://field_test//lib/field_test.rb#43
    def cache; end

    # source://field_test//lib/field_test.rb#31
    def config; end

    # source://field_test//lib/field_test.rb#26
    def config_path; end

    # source://field_test//lib/field_test.rb#47
    def cookies; end

    # @return [Boolean]
    #
    # source://field_test//lib/field_test.rb#59
    def events_supported?; end

    # @return [Boolean]
    #
    # source://field_test//lib/field_test.rb#39
    def exclude_bots?; end

    # source://field_test//lib/field_test.rb#35
    def excluded_ips; end

    # source://field_test//lib/field_test.rb#51
    def legacy_participants; end

    # source://field_test//lib/field_test.rb#73
    def mask_ip(ip); end

    # source://field_test//lib/field_test.rb#55
    def precision; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties/7.1.3.2/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.2/lib/rails/engine.rb#408
    def use_relative_model_naming?; end
  end
end

class FieldTest::BaseController < ::ActionController::Base
  private

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.3.2/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.3.2/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

module FieldTest::BaseController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::Hotwire::Livereload::LivereloadTagsHelper
  include ::Ransack::Helpers::FormHelper
  include ::ActionController::Base::HelperMethods
  include ::FieldTest::BaseHelper
end

module FieldTest::BaseHelper
  def field_test_participant_link(membership); end
end

class FieldTest::BinaryTest
  def initialize(*_arg0); end

  def add(*_arg0); end
  def probabilities(*_arg0); end
end

# source://field_test//lib/field_test/controller.rb#2
module FieldTest::Controller
  include ::FieldTest::Helpers
  extend ::ActiveSupport::Concern

  # source://field_test//lib/field_test/controller.rb#14
  def field_test_upgrade_memberships(options = T.unsafe(nil)); end

  private

  # source://field_test//lib/field_test/controller.rb#30
  def field_test_participant; end
end

# source://field_test//lib/field_test/engine.rb#2
class FieldTest::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://field_test//lib/field_test.rb#19
class FieldTest::Error < ::StandardError; end

class FieldTest::Event < ::ActiveRecord::Base
  include ::FieldTest::Event::GeneratedAttributeMethods
  include ::FieldTest::Event::GeneratedAssociationMethods

  # source://activerecord/7.1.3.2/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_field_test_membership(*args); end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.1.3.2/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.1.3.2/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3.2/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

module FieldTest::Event::GeneratedAssociationMethods
  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/singular_association.rb#32
  def build_field_test_membership(*args, &block); end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/singular_association.rb#36
  def create_field_test_membership(*args, &block); end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/singular_association.rb#40
  def create_field_test_membership!(*args, &block); end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/association.rb#103
  def field_test_membership; end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/association.rb#111
  def field_test_membership=(value); end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/belongs_to.rb#145
  def field_test_membership_changed?; end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/belongs_to.rb#149
  def field_test_membership_previously_changed?; end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/singular_association.rb#19
  def reload_field_test_membership; end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/singular_association.rb#23
  def reset_field_test_membership; end
end

module FieldTest::Event::GeneratedAttributeMethods; end

# source://field_test//lib/field_test/experiment.rb#2
class FieldTest::Experiment
  # @return [Experiment] a new instance of Experiment
  #
  # source://field_test//lib/field_test/experiment.rb#5
  def initialize(attributes); end

  # @return [Boolean]
  #
  # source://field_test//lib/field_test/experiment.rb#167
  def active?; end

  # @return [Boolean]
  #
  # source://field_test//lib/field_test/experiment.rb#171
  def closed?; end

  # source://field_test//lib/field_test/experiment.rb#179
  def control; end

  # source://field_test//lib/field_test/experiment.rb#63
  def convert(participants, goal: T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def description; end

  # Returns the value of attribute ended_at.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def ended_at; end

  # source://field_test//lib/field_test/experiment.rb#95
  def events; end

  # Returns the value of attribute goals.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def goals; end

  # Returns the value of attribute id.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def id; end

  # @return [Boolean]
  #
  # source://field_test//lib/field_test/experiment.rb#175
  def keep_variant?; end

  # source://field_test//lib/field_test/experiment.rb#91
  def memberships; end

  # @return [Boolean]
  #
  # source://field_test//lib/field_test/experiment.rb#99
  def multiple_goals?; end

  # Returns the value of attribute name.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def name; end

  # source://field_test//lib/field_test/experiment.rb#103
  def results(goal: T.unsafe(nil)); end

  # Returns the value of attribute started_at.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def started_at; end

  # @return [Boolean]
  #
  # source://field_test//lib/field_test/experiment.rb#183
  def use_events?; end

  # source://field_test//lib/field_test/experiment.rb#27
  def variant(participants, options = T.unsafe(nil)); end

  # Returns the value of attribute variants.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def variants; end

  # Returns the value of attribute weights.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def weights; end

  # Returns the value of attribute winner.
  #
  # source://field_test//lib/field_test/experiment.rb#3
  def winner; end

  private

  # source://field_test//lib/field_test/experiment.rb#231
  def cache_fetch(key); end

  # @raise [FieldTest::UnknownParticipant]
  #
  # source://field_test//lib/field_test/experiment.rb#206
  def check_participants(participants); end

  # TODO fetch in single query
  #
  # source://field_test//lib/field_test/experiment.rb#211
  def membership_for(participants); end

  # source://field_test//lib/field_test/experiment.rb#220
  def weighted_variant; end

  class << self
    # source://field_test//lib/field_test/experiment.rb#198
    def all; end

    # @raise [FieldTest::ExperimentNotFound]
    #
    # source://field_test//lib/field_test/experiment.rb#191
    def find(id); end
  end
end

# source://field_test//lib/field_test.rb#20
class FieldTest::ExperimentNotFound < ::FieldTest::Error; end

class FieldTest::ExperimentsController < ::FieldTest::BaseController
  def index; end
  def show; end

  private

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.1.3.2/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://field_test//lib/field_test/helpers.rb#2
module FieldTest::Helpers
  # source://field_test//lib/field_test/helpers.rb#3
  def field_test(experiment, **options); end

  # source://field_test//lib/field_test/helpers.rb#37
  def field_test_converted(experiment, **options); end

  # TODO fetch in single query
  #
  # source://field_test//lib/field_test/helpers.rb#46
  def field_test_experiments(**options); end
end

# source://field_test//lib/field_test/mailer.rb#2
module FieldTest::Mailer
  include ::FieldTest::Helpers
  extend ::ActiveSupport::Concern

  # source://field_test//lib/field_test/mailer.rb#12
  def field_test_participant; end
end

class FieldTest::Membership < ::ActiveRecord::Base
  include ::FieldTest::Membership::GeneratedAttributeMethods
  include ::FieldTest::Membership::GeneratedAssociationMethods

  # source://activerecord/7.1.3.2/lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_events(*args); end

  # source://activerecord/7.1.3.2/lib/active_record/autosave_association.rb#160
  def validate_associated_records_for_events(*args); end

  class << self
    # source://activesupport/7.1.3.2/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://activerecord/7.1.3.2/lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.1.3.2/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3.2/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

module FieldTest::Membership::GeneratedAssociationMethods
  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/collection_association.rb#62
  def event_ids; end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/collection_association.rb#72
  def event_ids=(ids); end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/association.rb#103
  def events; end

  # source://activerecord/7.1.3.2/lib/active_record/associations/builder/association.rb#111
  def events=(value); end
end

module FieldTest::Membership::GeneratedAttributeMethods; end

class FieldTest::MembershipsController < ::FieldTest::BaseController
  def update; end

  private

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def membership_params; end

  class << self
    # source://actionpack/7.1.3.2/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# source://field_test//lib/field_test/participant.rb#2
class FieldTest::Participant
  # @return [Participant] a new instance of Participant
  #
  # source://field_test//lib/field_test/participant.rb#5
  def initialize(object); end

  # Returns the value of attribute id.
  #
  # source://field_test//lib/field_test/participant.rb#3
  def id; end

  # source://field_test//lib/field_test/participant.rb#17
  def participant; end

  # Returns the value of attribute type.
  #
  # source://field_test//lib/field_test/participant.rb#3
  def type; end

  # source://field_test//lib/field_test/participant.rb#21
  def where_values; end

  class << self
    # source://field_test//lib/field_test/participant.rb#34
    def standardize(participant); end
  end
end

class FieldTest::ParticipantsController < ::FieldTest::BaseController
  def show; end

  private

  # source://actionview/7.1.3.2/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.1.3.2/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

# same as ahoy
#
# source://field_test//lib/field_test.rb#24
FieldTest::UUID_NAMESPACE = T.let(T.unsafe(nil), String)

# source://field_test//lib/field_test.rb#21
class FieldTest::UnknownParticipant < ::FieldTest::Error; end

# source://field_test//lib/field_test/version.rb#2
FieldTest::VERSION = T.let(T.unsafe(nil), String)
