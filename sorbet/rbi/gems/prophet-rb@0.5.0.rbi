# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prophet-rb` gem.
# Please instead update this file by running `bin/tapioca gem prophet-rb`.

# source://prophet-rb//lib/prophet/diagnostics.rb#1
module Prophet
  class << self
    # TODO better name for interval_width
    # TODO DRY with forecast method
    #
    # source://prophet-rb//lib/prophet.rb#95
    def anomalies(series, interval_width: T.unsafe(nil), country_holidays: T.unsafe(nil), cap: T.unsafe(nil), verbose: T.unsafe(nil), **options); end

    # @raise [ArgumentError]
    #
    # source://prophet-rb//lib/prophet.rb#25
    def forecast(series, count: T.unsafe(nil), country_holidays: T.unsafe(nil), cap: T.unsafe(nil), verbose: T.unsafe(nil), **options); end

    # source://prophet-rb//lib/prophet.rb#109
    def from_json(model_json); end

    # source://prophet-rb//lib/prophet.rb#21
    def new(**kwargs); end
  end
end

# source://prophet-rb//lib/prophet/diagnostics.rb#2
module Prophet::Diagnostics
  class << self
    # source://prophet-rb//lib/prophet/diagnostics.rb#341
    def coverage(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#31
    def cross_validation(model, horizon:, period: T.unsafe(nil), initial: T.unsafe(nil), cutoffs: T.unsafe(nil)); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#167
    def deepcopy(value); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#3
    def generate_cutoffs(df, horizon, initial, period); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#309
    def mae(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#317
    def mape(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#325
    def mdape(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#295
    def mse(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#177
    def performance_metrics(df, metrics: T.unsafe(nil), rolling_window: T.unsafe(nil), monthly: T.unsafe(nil)); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#115
    def prophet_copy(m, cutoff = T.unsafe(nil)); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#303
    def rmse(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#224
    def rolling_mean_by_h(x, h, w, name); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#260
    def rolling_median_by_h(x, h, w, name); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#89
    def single_cutoff_forecast(df, model, cutoff, horizon, predict_columns); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#333
    def smape(df, w); end

    # source://prophet-rb//lib/prophet/diagnostics.rb#156
    def timedelta(value); end
  end
end

# source://prophet-rb//lib/prophet.rb#19
class Prophet::Error < ::StandardError; end

# source://prophet-rb//lib/prophet/forecaster.rb#2
class Prophet::Forecaster
  include ::Prophet::Holidays
  include ::Prophet::Plot

  # @return [Forecaster] a new instance of Forecaster
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#15
  def initialize(growth: T.unsafe(nil), changepoints: T.unsafe(nil), n_changepoints: T.unsafe(nil), changepoint_range: T.unsafe(nil), yearly_seasonality: T.unsafe(nil), weekly_seasonality: T.unsafe(nil), daily_seasonality: T.unsafe(nil), holidays: T.unsafe(nil), seasonality_mode: T.unsafe(nil), seasonality_prior_scale: T.unsafe(nil), holidays_prior_scale: T.unsafe(nil), changepoint_prior_scale: T.unsafe(nil), mcmc_samples: T.unsafe(nil), interval_width: T.unsafe(nil), uncertainty_samples: T.unsafe(nil)); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#402
  def add_country_holidays(country_name); end

  # source://prophet-rb//lib/prophet/forecaster.rb#510
  def add_group_component(components, name, group); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#354
  def add_regressor(name, prior_scale: T.unsafe(nil), standardize: T.unsafe(nil), mode: T.unsafe(nil)); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#373
  def add_seasonality(name:, period:, fourier_order:, prior_scale: T.unsafe(nil), mode: T.unsafe(nil), condition_name: T.unsafe(nil)); end

  # Returns the value of attribute changepoint_prior_scale.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def changepoint_prior_scale; end

  # Returns the value of attribute changepoint_range.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def changepoint_range; end

  # Returns the value of attribute changepoints.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def changepoints; end

  # source://prophet-rb//lib/prophet/forecaster.rb#281
  def construct_holiday_dataframe(dates); end

  # Returns the value of attribute country_holidays.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#13
  def country_holidays; end

  # Sets the attribute country_holidays
  #
  # @param value the value to set the attribute country_holidays to.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#13
  def country_holidays=(_arg0); end

  # Returns the value of attribute extra_regressors.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#13
  def extra_regressors; end

  # Sets the attribute extra_regressors
  #
  # @param value the value to set the attribute extra_regressors to.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#13
  def extra_regressors=(_arg0); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#632
  def fit(df, **kwargs); end

  # Returns the value of attribute fit_kwargs.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def fit_kwargs; end

  # source://prophet-rb//lib/prophet/forecaster.rb#626
  def flat_growth_init(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#778
  def flat_trend(t, m); end

  # source://prophet-rb//lib/prophet/forecaster.rb#265
  def fourier_series(dates, period, series_order); end

  # Returns the value of attribute growth.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def growth; end

  # Returns the value of attribute history.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def history; end

  # Returns the value of attribute holidays.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def holidays; end

  # Returns the value of attribute holidays_prior_scale.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def holidays_prior_scale; end

  # source://prophet-rb//lib/prophet/forecaster.rb#217
  def initialize_scales(initialize_scales, df); end

  # Returns the value of attribute interval_width.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def interval_width; end

  # source://prophet-rb//lib/prophet/forecaster.rb#589
  def linear_growth_init(df); end

  # Returns the value of attribute logger.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def logger; end

  # source://prophet-rb//lib/prophet/forecaster.rb#598
  def logistic_growth_init(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#423
  def make_all_seasonality_features(df); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#941
  def make_future_dataframe(periods:, freq: T.unsafe(nil), include_history: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/forecaster.rb#306
  def make_holiday_features(dates, holidays); end

  # source://prophet-rb//lib/prophet/forecaster.rb#276
  def make_seasonality_features(dates, period, series_order, prefix); end

  # Returns the value of attribute mcmc_samples.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def mcmc_samples; end

  # Returns the value of attribute n_changepoints.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def n_changepoints; end

  # Returns the value of attribute params.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def params; end

  # source://prophet-rb//lib/prophet/forecaster.rb#520
  def parse_seasonality_args(name, arg, auto_disable, default_order); end

  # source://prophet-rb//lib/prophet/forecaster.rb#745
  def piecewise_linear(t, deltas, k, m, changepoint_ts); end

  # source://prophet-rb//lib/prophet/forecaster.rb#759
  def piecewise_logistic(t, cap, deltas, k, m, changepoint_ts); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#717
  def predict(df = T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/forecaster.rb#801
  def predict_seasonal_components(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#783
  def predict_trend(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#865
  def predict_uncertainty(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#859
  def predictive_samples(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#473
  def regressor_column_matrix(seasonal_features, modes); end

  # source://prophet-rb//lib/prophet/forecaster.rb#880
  def sample_model(df, seasonal_features, iteration, s_a, s_m); end

  # source://prophet-rb//lib/prophet/forecaster.rb#826
  def sample_posterior_predictive(df); end

  # source://prophet-rb//lib/prophet/forecaster.rb#897
  def sample_predictive_trend(df, iteration); end

  # Returns the value of attribute seasonalities.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#13
  def seasonalities; end

  # Sets the attribute seasonalities
  #
  # @param value the value to set the attribute seasonalities to.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#13
  def seasonalities=(_arg0); end

  # Returns the value of attribute seasonality_mode.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def seasonality_mode; end

  # Returns the value of attribute seasonality_prior_scale.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def seasonality_prior_scale; end

  # source://prophet-rb//lib/prophet/forecaster.rb#541
  def set_auto_seasonalities; end

  # source://prophet-rb//lib/prophet/forecaster.rb#232
  def set_changepoints; end

  # @raise [ArgumentError]
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#151
  def setup_dataframe(df, initialize_scales: T.unsafe(nil)); end

  # Returns the value of attribute specified_changepoints.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def specified_changepoints; end

  # source://prophet-rb//lib/prophet/forecaster.rb#987
  def to_json; end

  # Returns the value of attribute train_holiday_names.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def train_holiday_names; end

  # Returns the value of attribute uncertainty_samples.
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#6
  def uncertainty_samples; end

  # source://prophet-rb//lib/prophet/forecaster.rb#120
  def validate_column_name(name, check_holidays: T.unsafe(nil), check_seasonalities: T.unsafe(nil), check_regressors: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/forecaster.rb#85
  def validate_inputs; end

  private

  # source://prophet-rb//lib/prophet/forecaster.rb#1070
  def as_json; end

  # source://prophet-rb//lib/prophet/forecaster.rb#995
  def convert_df(df); end

  # okay to do in-place
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#1025
  def df_concat_axis_one(dfs); end

  # https://en.wikipedia.org/wiki/Laplace_distribution#Generating_values_from_the_Laplace_distribution
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#1045
  def laplace(loc, scale, size); end

  # https://en.wikipedia.org/wiki/Poisson_distribution#Generating_Poisson-distributed_random_variables
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#1033
  def poisson(lam); end

  # Time is preferred over DateTime in Ruby docs
  # use UTC to be consistent with Python
  # and so days have equal length (no DST)
  #
  # source://prophet-rb//lib/prophet/forecaster.rb#1008
  def to_datetime(vec); end

  class << self
    # source://prophet-rb//lib/prophet/forecaster.rb#1167
    def from_json(model_json); end
  end
end

# source://prophet-rb//lib/prophet/forecaster.rb#1066
Prophet::Forecaster::NP_ARRAY = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/forecaster.rb#1068
Prophet::Forecaster::ORDEREDDICT = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/forecaster.rb#1064
Prophet::Forecaster::PD_DATAFRAME = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/forecaster.rb#1058
Prophet::Forecaster::PD_SERIES = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/forecaster.rb#1062
Prophet::Forecaster::PD_TIMEDELTA = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/forecaster.rb#1060
Prophet::Forecaster::PD_TIMESTAMP = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/forecaster.rb#1050
Prophet::Forecaster::SIMPLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://prophet-rb//lib/prophet/holidays.rb#2
module Prophet::Holidays
  # source://prophet-rb//lib/prophet/holidays.rb#3
  def get_holiday_names(country); end

  # TODO improve performance
  #
  # source://prophet-rb//lib/prophet/holidays.rb#17
  def holidays_df; end

  # source://prophet-rb//lib/prophet/holidays.rb#12
  def make_holidays_df(year_list, country); end
end

# source://prophet-rb//lib/prophet/plot.rb#2
module Prophet::Plot
  # in Python, this is a separate method
  #
  # source://prophet-rb//lib/prophet/plot.rb#97
  def add_changepoints_to_plot(ax, fcst, threshold: T.unsafe(nil), cp_color: T.unsafe(nil), cp_linestyle: T.unsafe(nil), trend: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/plot.rb#3
  def plot(fcst, ax: T.unsafe(nil), uncertainty: T.unsafe(nil), plot_cap: T.unsafe(nil), xlabel: T.unsafe(nil), ylabel: T.unsafe(nil), figsize: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/plot.rb#34
  def plot_components(fcst, uncertainty: T.unsafe(nil), plot_cap: T.unsafe(nil), weekly_start: T.unsafe(nil), yearly_start: T.unsafe(nil), figsize: T.unsafe(nil)); end

  private

  # source://prophet-rb//lib/prophet/plot.rb#324
  def dates; end

  # source://prophet-rb//lib/prophet/plot.rb#171
  def plot_forecast_component(fcst, name, ax: T.unsafe(nil), uncertainty: T.unsafe(nil), plot_cap: T.unsafe(nil), figsize: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/plot.rb#272
  def plot_seasonality(name:, ax: T.unsafe(nil), uncertainty: T.unsafe(nil), figsize: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/plot.rb#218
  def plot_weekly(ax: T.unsafe(nil), uncertainty: T.unsafe(nil), weekly_start: T.unsafe(nil), figsize: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/plot.rb#245
  def plot_yearly(ax: T.unsafe(nil), uncertainty: T.unsafe(nil), yearly_start: T.unsafe(nil), figsize: T.unsafe(nil), name: T.unsafe(nil)); end

  # source://prophet-rb//lib/prophet/plot.rb#320
  def plt; end

  # source://prophet-rb//lib/prophet/plot.rb#202
  def seasonality_plot_df(ds); end

  # source://prophet-rb//lib/prophet/plot.rb#313
  def set_y_as_percent(ax); end

  # source://prophet-rb//lib/prophet/plot.rb#328
  def ticker; end

  # source://prophet-rb//lib/prophet/plot.rb#332
  def to_pydatetime(v); end

  class << self
    # source://prophet-rb//lib/prophet/plot.rb#114
    def plot_cross_validation_metric(df_cv, metric:, rolling_window: T.unsafe(nil), ax: T.unsafe(nil), figsize: T.unsafe(nil), color: T.unsafe(nil), point_color: T.unsafe(nil)); end

    # source://prophet-rb//lib/prophet/plot.rb#160
    def plt; end
  end
end

# source://prophet-rb//lib/prophet/stan_backend.rb#2
class Prophet::StanBackend
  # @return [StanBackend] a new instance of StanBackend
  #
  # source://prophet-rb//lib/prophet/stan_backend.rb#3
  def initialize(logger); end

  # source://prophet-rb//lib/prophet/stan_backend.rb#14
  def fit(stan_init, stan_data, **kwargs); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/stan_backend.rb#8
  def load_model; end

  # source://prophet-rb//lib/prophet/stan_backend.rb#56
  def sampling(stan_init, stan_data, samples, **kwargs); end

  private

  # source://prophet-rb//lib/prophet/stan_backend.rb#148
  def platform; end

  # source://prophet-rb//lib/prophet/stan_backend.rb#135
  def prepare_data(stan_init, stan_data); end

  # @raise [Error]
  #
  # source://prophet-rb//lib/prophet/stan_backend.rb#94
  def stan_to_numo(column_names, data); end
end

# source://prophet-rb//lib/prophet/version.rb#2
Prophet::VERSION = T.let(T.unsafe(nil), String)
