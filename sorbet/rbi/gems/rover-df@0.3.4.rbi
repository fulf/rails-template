# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rover-df` gem.
# Please instead update this file by running `bin/tapioca gem rover-df`.

# source://rover-df//lib/rover/data_frame.rb#1
module Rover
  class << self
    # source://rover-df//lib/rover.rb#18
    def parse_csv(str, **options); end

    # source://rover-df//lib/rover.rb#30
    def parse_parquet(str, **options); end

    # source://rover-df//lib/rover.rb#12
    def read_csv(path, **options); end

    # source://rover-df//lib/rover.rb#24
    def read_parquet(path, **options); end

    private

    # @raise [ArgumentError]
    #
    # source://rover-df//lib/rover.rb#38
    def csv_to_df(types: T.unsafe(nil), headers: T.unsafe(nil), **csv_options); end

    # source://rover-df//lib/rover.rb#109
    def parquet_to_df(types: T.unsafe(nil)); end
  end
end

# source://rover-df//lib/rover/data_frame.rb#2
class Rover::DataFrame
  # @return [DataFrame] a new instance of DataFrame
  #
  # source://rover-df//lib/rover/data_frame.rb#3
  def initialize(*args); end

  # source://rover-df//lib/rover/data_frame.rb#368
  def +(other); end

  # don't check types
  #
  # source://rover-df//lib/rover/data_frame.rb#409
  def ==(other); end

  # source://rover-df//lib/rover/data_frame.rb#64
  def [](where); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/data_frame.rb#102
  def []=(k, v); end

  # should this check for columns as well?
  #
  # @return [Boolean]
  #
  # source://rover-df//lib/rover/data_frame.rb#116
  def any?; end

  # source://rover-df//lib/rover/data_frame.rb#125
  def clear; end

  # in-place, like Array#concat
  # TODO make more performant
  #
  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/data_frame.rb#374
  def concat(other); end

  # source://rover-df//lib/rover/data_frame.rb#109
  def count; end

  # source://rover-df//lib/rover/data_frame.rb#360
  def deep_dup; end

  # source://rover-df//lib/rover/data_frame.rb#150
  def delete(key); end

  # source://rover-df//lib/rover/data_frame.rb#85
  def each_row; end

  # should this check for columns as well?
  #
  # @return [Boolean]
  #
  # source://rover-df//lib/rover/data_frame.rb#121
  def empty?; end

  # source://rover-df//lib/rover/data_frame.rb#154
  def except(*keys); end

  # source://rover-df//lib/rover/data_frame.rb#158
  def except!(*keys); end

  # source://rover-df//lib/rover/data_frame.rb#177
  def first(n = T.unsafe(nil)); end

  # source://rover-df//lib/rover/data_frame.rb#349
  def group(*columns); end

  # source://rover-df//lib/rover/data_frame.rb#169
  def head(n = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rover-df//lib/rover/data_frame.rb#165
  def include?(key); end

  # see join for options
  #
  # source://rover-df//lib/rover/data_frame.rb#399
  def inner_join(other, on: T.unsafe(nil)); end

  # TODO handle long text better
  #
  # source://rover-df//lib/rover/data_frame.rb#299
  def inspect; end

  # source://rover-df//lib/rover/data_frame.rb#133
  def keys; end

  # source://rover-df//lib/rover/data_frame.rb#185
  def last(n = T.unsafe(nil)); end

  # see join for options
  #
  # source://rover-df//lib/rover/data_frame.rb#404
  def left_join(other, on: T.unsafe(nil)); end

  # source://rover-df//lib/rover/data_frame.rb#109
  def length; end

  # source://rover-df//lib/rover/data_frame.rb#354
  def max(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#354
  def mean(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#354
  def median(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#387
  def merge(other); end

  # source://rover-df//lib/rover/data_frame.rb#391
  def merge!(other); end

  # source://rover-df//lib/rover/data_frame.rb#354
  def min(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#133
  def names; end

  # TODO raise error when collision
  #
  # source://rover-df//lib/rover/data_frame.rb#220
  def one_hot(drop: T.unsafe(nil)); end

  # source://rover-df//lib/rover/data_frame.rb#354
  def percentile(column, *args); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/data_frame.rb#415
  def plot(x = T.unsafe(nil), y = T.unsafe(nil), type: T.unsafe(nil), group: T.unsafe(nil), stacked: T.unsafe(nil)); end

  # source://rover-df//lib/rover/data_frame.rb#139
  def rename(mapping); end

  # source://rover-df//lib/rover/data_frame.rb#193
  def sample(*args, **kwargs); end

  # source://rover-df//lib/rover/data_frame.rb#129
  def shape; end

  # source://rover-df//lib/rover/data_frame.rb#109
  def size; end

  # source://rover-df//lib/rover/data_frame.rb#345
  def sort_by(&block); end

  # source://rover-df//lib/rover/data_frame.rb#333
  def sort_by!; end

  # source://rover-df//lib/rover/data_frame.rb#354
  def std(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#354
  def sum(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#173
  def tail(n = T.unsafe(nil)); end

  # source://rover-df//lib/rover/data_frame.rb#199
  def to_a; end

  # source://rover-df//lib/rover/data_frame.rb#238
  def to_csv; end

  # source://rover-df//lib/rover/data_frame.rb#207
  def to_h; end

  # for IRuby
  #
  # source://rover-df//lib/rover/data_frame.rb#288
  def to_html; end

  # source://rover-df//lib/rover/data_frame.rb#215
  def to_numo; end

  # source://rover-df//lib/rover/data_frame.rb#249
  def to_parquet; end

  # TODO handle long text better
  # alias like hash
  #
  # source://rover-df//lib/rover/data_frame.rb#299
  def to_s; end

  # source://rover-df//lib/rover/data_frame.rb#98
  def types; end

  # source://rover-df//lib/rover/data_frame.rb#354
  def var(column, *args); end

  # source://rover-df//lib/rover/data_frame.rb#133
  def vector_names; end

  # dup to prevent direct modification of keys
  #
  # source://rover-df//lib/rover/data_frame.rb#94
  def vectors; end

  private

  # source://rover-df//lib/rover/data_frame.rb#591
  def check_column(key); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/data_frame.rb#585
  def check_join_keys(df, keys); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/data_frame.rb#529
  def check_key(key); end

  # for clone
  #
  # source://rover-df//lib/rover/data_frame.rb#518
  def initialize_clone(_); end

  # for dup
  #
  # source://rover-df//lib/rover/data_frame.rb#524
  def initialize_dup(_); end

  # TODO make more efficient
  # TODO add option to prefix/suffix keys?
  # Supports:
  # - on: :key
  # - on: [:key1, :key2]
  # - on: {key1a: :key1b, key2a: :key2b}
  #
  # source://rover-df//lib/rover/data_frame.rb#539
  def join(other, how:, on: T.unsafe(nil)); end

  # source://rover-df//lib/rover/data_frame.rb#597
  def join_type(a, b); end

  # can't use data = {} and keyword arguments
  # as this causes an unknown keyword error when data is passed as
  # DataFrame.new({a: ..., b: ...})
  #
  # at the moment, there doesn't appear to be a way to distinguish between
  # DataFrame.new({types: ...}) which should set data, and
  # DataFrame.new(types: ...) which should set options
  # https://bugs.ruby-lang.org/issues/16891
  #
  # there aren't currently options that should be used without data
  # if this is ever the case, we should still require data
  # to prevent new options from breaking existing code
  #
  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/data_frame.rb#645
  def process_args(args); end

  # source://rover-df//lib/rover/data_frame.rb#610
  def to_vector(v, size: T.unsafe(nil), type: T.unsafe(nil)); end
end

# source://rover-df//lib/rover/group.rb#2
class Rover::Group
  # @return [Group] a new instance of Group
  #
  # source://rover-df//lib/rover/group.rb#3
  def initialize(df, columns); end

  # source://rover-df//lib/rover/group.rb#14
  def count(*args); end

  # source://rover-df//lib/rover/group.rb#9
  def group(*columns); end

  # source://rover-df//lib/rover/group.rb#14
  def max(*args); end

  # source://rover-df//lib/rover/group.rb#14
  def mean(*args); end

  # source://rover-df//lib/rover/group.rb#14
  def median(*args); end

  # source://rover-df//lib/rover/group.rb#14
  def min(*args); end

  # source://rover-df//lib/rover/group.rb#14
  def percentile(*args); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/group.rb#26
  def plot(*args, **options); end

  # source://rover-df//lib/rover/group.rb#14
  def std(*args); end

  # source://rover-df//lib/rover/group.rb#14
  def sum(*args); end

  # source://rover-df//lib/rover/group.rb#14
  def var(*args); end

  private

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/group.rb#55
  def check_columns; end

  # TODO make more efficient
  #
  # source://rover-df//lib/rover/group.rb#37
  def grouped_dfs; end
end

# source://rover-df//lib/rover/version.rb#2
Rover::VERSION = T.let(T.unsafe(nil), String)

# source://rover-df//lib/rover/vector.rb#2
class Rover::Vector
  # @raise [ArgumentError]
  # @return [Vector] a new instance of Vector
  #
  # source://rover-df//lib/rover/vector.rb#26
  def initialize(data, type: T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#150
  def !; end

  # source://rover-df//lib/rover/vector.rb#122
  def !=(other); end

  # source://rover-df//lib/rover/vector.rb#103
  def %(other); end

  # source://rover-df//lib/rover/vector.rb#103
  def &(other); end

  # source://rover-df//lib/rover/vector.rb#103
  def *(other); end

  # source://rover-df//lib/rover/vector.rb#103
  def **(other); end

  # source://rover-df//lib/rover/vector.rb#103
  def +(other); end

  # source://rover-df//lib/rover/vector.rb#103
  def -(other); end

  # source://rover-df//lib/rover/vector.rb#158
  def -@; end

  # source://rover-df//lib/rover/vector.rb#103
  def /(other); end

  # source://rover-df//lib/rover/vector.rb#122
  def <(other); end

  # source://rover-df//lib/rover/vector.rb#122
  def <=(other); end

  # source://rover-df//lib/rover/vector.rb#122
  def ==(other); end

  # source://rover-df//lib/rover/vector.rb#122
  def >(other); end

  # source://rover-df//lib/rover/vector.rb#122
  def >=(other); end

  # source://rover-df//lib/rover/vector.rb#88
  def [](v); end

  # source://rover-df//lib/rover/vector.rb#97
  def []=(k, v); end

  # source://rover-df//lib/rover/vector.rb#103
  def ^(other); end

  # source://rover-df//lib/rover/vector.rb#199
  def abs; end

  # source://rover-df//lib/rover/vector.rb#231
  def acos; end

  # source://rover-df//lib/rover/vector.rb#231
  def acosh; end

  # @return [Boolean]
  #
  # source://rover-df//lib/rover/vector.rb#310
  def all?(&block); end

  # @return [Boolean]
  #
  # source://rover-df//lib/rover/vector.rb#314
  def any?(&block); end

  # source://rover-df//lib/rover/vector.rb#231
  def asin; end

  # source://rover-df//lib/rover/vector.rb#231
  def asinh; end

  # source://rover-df//lib/rover/vector.rb#231
  def atan; end

  # source://rover-df//lib/rover/vector.rb#231
  def atanh; end

  # source://rover-df//lib/rover/vector.rb#231
  def cbrt; end

  # source://rover-df//lib/rover/vector.rb#212
  def ceil(ndigits = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#167
  def clamp(min, max); end

  # source://rover-df//lib/rover/vector.rb#162
  def clamp!(min, max); end

  # source://rover-df//lib/rover/vector.rb#231
  def cos; end

  # source://rover-df//lib/rover/vector.rb#231
  def cosh; end

  # source://rover-df//lib/rover/vector.rb#58
  def count; end

  # source://rover-df//lib/rover/vector.rb#349
  def crosstab(other); end

  # keep same number of rows as original
  # to make it easy to add to original data frame
  #
  # source://rover-df//lib/rover/vector.rb#83
  def diff; end

  # source://rover-df//lib/rover/vector.rb#264
  def each(&block); end

  # source://rover-df//lib/rover/vector.rb#268
  def each_with_index(&block); end

  # @return [Boolean]
  #
  # source://rover-df//lib/rover/vector.rb#318
  def empty?; end

  # source://rover-df//lib/rover/vector.rb#231
  def erf; end

  # source://rover-df//lib/rover/vector.rb#231
  def erfc; end

  # source://rover-df//lib/rover/vector.rb#231
  def exp; end

  # source://rover-df//lib/rover/vector.rb#231
  def exp2; end

  # TODO return element instead of vector if no argument in 0.4.0
  #
  # source://rover-df//lib/rover/vector.rb#327
  def first(n = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#221
  def floor(ndigits = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#254
  def frexp; end

  # source://rover-df//lib/rover/vector.rb#362
  def head(n = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#249
  def hypot(y); end

  # @return [Boolean]
  #
  # source://rover-df//lib/rover/vector.rb#136
  def in?(values); end

  # TODO add type and size?
  #
  # source://rover-df//lib/rover/vector.rb#387
  def inspect; end

  # TODO return element instead of vector if no argument in 0.4.0
  #
  # source://rover-df//lib/rover/vector.rb#336
  def last(n = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#259
  def ldexp(exponent); end

  # source://rover-df//lib/rover/vector.rb#58
  def length; end

  # source://rover-df//lib/rover/vector.rb#245
  def ln; end

  # source://rover-df//lib/rover/vector.rb#236
  def log(base = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#231
  def log10; end

  # source://rover-df//lib/rover/vector.rb#231
  def log2; end

  # source://rover-df//lib/rover/vector.rb#171
  def map(&block); end

  # source://rover-df//lib/rover/vector.rb#177
  def map!(&block); end

  # source://rover-df//lib/rover/vector.rb#272
  def max; end

  # source://rover-df//lib/rover/vector.rb#280
  def mean; end

  # source://rover-df//lib/rover/vector.rb#286
  def median; end

  # source://rover-df//lib/rover/vector.rb#276
  def min; end

  # source://rover-df//lib/rover/vector.rb#68
  def missing; end

  # @return [Boolean]
  #
  # source://rover-df//lib/rover/vector.rb#54
  def numeric?; end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/vector.rb#372
  def one_hot(drop: T.unsafe(nil), prefix: T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#292
  def percentile(q); end

  # source://rover-df//lib/rover/vector.rb#186
  def reject(&block); end

  # source://rover-df//lib/rover/vector.rb#203
  def round(ndigits = T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#182
  def select(&block); end

  # source://rover-df//lib/rover/vector.rb#231
  def sin; end

  # source://rover-df//lib/rover/vector.rb#231
  def sinh; end

  # source://rover-df//lib/rover/vector.rb#58
  def size; end

  # source://rover-df//lib/rover/vector.rb#195
  def sort; end

  # source://rover-df//lib/rover/vector.rb#231
  def sqrt; end

  # uses Bessel's correction for now since that's all Numo supports
  #
  # source://rover-df//lib/rover/vector.rb#301
  def std; end

  # source://rover-df//lib/rover/vector.rb#296
  def sum; end

  # source://rover-df//lib/rover/vector.rb#367
  def tail(n = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/vector.rb#344
  def take(n); end

  # use Ruby tally for performance
  #
  # source://rover-df//lib/rover/vector.rb#191
  def tally; end

  # source://rover-df//lib/rover/vector.rb#231
  def tan; end

  # source://rover-df//lib/rover/vector.rb#231
  def tanh; end

  # source://rover-df//lib/rover/vector.rb#35
  def to(type); end

  # source://rover-df//lib/rover/vector.rb#39
  def to!(type); end

  # source://rover-df//lib/rover/vector.rb#48
  def to_a; end

  # for IRuby
  #
  # source://rover-df//lib/rover/vector.rb#395
  def to_html; end

  # source://rover-df//lib/rover/vector.rb#44
  def to_numo; end

  # TODO add type and size?
  # alias like hash
  #
  # source://rover-df//lib/rover/vector.rb#387
  def to_s; end

  # source://rover-df//lib/rover/vector.rb#31
  def type; end

  # source://rover-df//lib/rover/vector.rb#64
  def uniq; end

  # uses Bessel's correction for now since that's all Numo supports
  #
  # source://rover-df//lib/rover/vector.rb#306
  def var; end

  # source://rover-df//lib/rover/vector.rb#322
  def zip(other, &block); end

  # source://rover-df//lib/rover/vector.rb#103
  def |(other); end

  private

  # source://rover-df//lib/rover/vector.rb#427
  def cast_data(data, type: T.unsafe(nil)); end

  # source://rover-df//lib/rover/vector.rb#419
  def coerce(other); end

  # for clone
  #
  # source://rover-df//lib/rover/vector.rb#408
  def initialize_clone(_); end

  # for dup
  #
  # source://rover-df//lib/rover/vector.rb#414
  def initialize_dup(_); end

  # @raise [ArgumentError]
  #
  # source://rover-df//lib/rover/vector.rb#472
  def numo_type(type); end
end

# source://rover-df//lib/rover/vector.rb#24
Rover::Vector::NOT_SET = T.let(T.unsafe(nil), Object)

# if a user never specifies types,
# the defaults are bool, float64, int64, and object
#
# source://rover-df//lib/rover/vector.rb#5
Rover::Vector::TYPE_CAST_MAPPING = T.let(T.unsafe(nil), Hash)
